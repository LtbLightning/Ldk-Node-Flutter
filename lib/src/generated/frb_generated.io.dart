// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/error.dart';
import 'api/node.dart';
import 'api/types.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class LdkCoreApiImplPlatform extends BaseApiImpl<LdkCoreWire> {
  LdkCoreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NodePtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_NodePtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NodeBuilderPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilderPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LdkNodePaymentBolt11PaymentPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11PaymentPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LdkNodePaymentOnchainPaymentPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPaymentPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LdkNodePaymentSpontaneousPaymentPtr =>
          wire._rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPaymentPtr;

  @protected
  NodeBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
          dynamic raw);

  @protected
  Node dco_decode_RustOpaque_Node(dynamic raw);

  @protected
  NodeBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
          dynamic raw);

  @protected
  LdkNodePaymentBolt11Payment
      dco_decode_RustOpaque_ldk_nodepaymentBolt11Payment(dynamic raw);

  @protected
  LdkNodePaymentOnchainPayment
      dco_decode_RustOpaque_ldk_nodepaymentOnchainPayment(dynamic raw);

  @protected
  LdkNodePaymentSpontaneousPayment
      dco_decode_RustOpaque_ldk_nodepaymentSpontaneousPayment(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  Address dco_decode_address(dynamic raw);

  @protected
  BalanceDetails dco_decode_balance_details(dynamic raw);

  @protected
  BestBlock dco_decode_best_block(dynamic raw);

  @protected
  Bolt11Invoice dco_decode_bolt_11_invoice(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Address dco_decode_box_autoadd_address(dynamic raw);

  @protected
  Bolt11Invoice dco_decode_box_autoadd_bolt_11_invoice(dynamic raw);

  @protected
  ChainDataSourceConfig dco_decode_box_autoadd_chain_data_source_config(
      dynamic raw);

  @protected
  ChannelConfig dco_decode_box_autoadd_channel_config(dynamic raw);

  @protected
  ChannelId dco_decode_box_autoadd_channel_id(dynamic raw);

  @protected
  ClosureReason dco_decode_box_autoadd_closure_reason(dynamic raw);

  @protected
  Config dco_decode_box_autoadd_config(dynamic raw);

  @protected
  EntropySourceConfig dco_decode_box_autoadd_entropy_source_config(dynamic raw);

  @protected
  Event dco_decode_box_autoadd_event(dynamic raw);

  @protected
  GossipSourceConfig dco_decode_box_autoadd_gossip_source_config(dynamic raw);

  @protected
  LdkBolt11Payment dco_decode_box_autoadd_ldk_bolt_11_payment(dynamic raw);

  @protected
  LdkMnemonic dco_decode_box_autoadd_ldk_mnemonic(dynamic raw);

  @protected
  LdkNode dco_decode_box_autoadd_ldk_node(dynamic raw);

  @protected
  LdkOnChainPayment dco_decode_box_autoadd_ldk_on_chain_payment(dynamic raw);

  @protected
  LdkSpontaneousPayment dco_decode_box_autoadd_ldk_spontaneous_payment(
      dynamic raw);

  @protected
  LiquiditySourceConfig dco_decode_box_autoadd_liquidity_source_config(
      dynamic raw);

  @protected
  LSPFeeLimits dco_decode_box_autoadd_lsp_fee_limits(dynamic raw);

  @protected
  MaxDustHTLCExposure dco_decode_box_autoadd_max_dust_htlc_exposure(
      dynamic raw);

  @protected
  OutPoint dco_decode_box_autoadd_out_point(dynamic raw);

  @protected
  PaymentDetails dco_decode_box_autoadd_payment_details(dynamic raw);

  @protected
  PaymentFailureReason dco_decode_box_autoadd_payment_failure_reason(
      dynamic raw);

  @protected
  PaymentHash dco_decode_box_autoadd_payment_hash(dynamic raw);

  @protected
  PaymentId dco_decode_box_autoadd_payment_id(dynamic raw);

  @protected
  PaymentPreimage dco_decode_box_autoadd_payment_preimage(dynamic raw);

  @protected
  PaymentSecret dco_decode_box_autoadd_payment_secret(dynamic raw);

  @protected
  PublicKey dco_decode_box_autoadd_public_key(dynamic raw);

  @protected
  SocketAddress dco_decode_box_autoadd_socket_address(dynamic raw);

  @protected
  Txid dco_decode_box_autoadd_txid(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_16(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  UserChannelId dco_decode_box_autoadd_user_channel_id(dynamic raw);

  @protected
  BuilderException dco_decode_builder_exception(dynamic raw);

  @protected
  ChainDataSourceConfig dco_decode_chain_data_source_config(dynamic raw);

  @protected
  ChannelConfig dco_decode_channel_config(dynamic raw);

  @protected
  ChannelDetails dco_decode_channel_details(dynamic raw);

  @protected
  ChannelId dco_decode_channel_id(dynamic raw);

  @protected
  ClosureReason dco_decode_closure_reason(dynamic raw);

  @protected
  Config dco_decode_config(dynamic raw);

  @protected
  EntropySourceConfig dco_decode_entropy_source_config(dynamic raw);

  @protected
  Event dco_decode_event(dynamic raw);

  @protected
  GossipSourceConfig dco_decode_gossip_source_config(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  LdkBolt11Payment dco_decode_ldk_bolt_11_payment(dynamic raw);

  @protected
  LdkMnemonic dco_decode_ldk_mnemonic(dynamic raw);

  @protected
  LdkNode dco_decode_ldk_node(dynamic raw);

  @protected
  LdkOnChainPayment dco_decode_ldk_on_chain_payment(dynamic raw);

  @protected
  LdkSpontaneousPayment dco_decode_ldk_spontaneous_payment(dynamic raw);

  @protected
  LightningBalance dco_decode_lightning_balance(dynamic raw);

  @protected
  LiquiditySourceConfig dco_decode_liquidity_source_config(dynamic raw);

  @protected
  List<ChannelDetails> dco_decode_list_channel_details(dynamic raw);

  @protected
  List<LightningBalance> dco_decode_list_lightning_balance(dynamic raw);

  @protected
  List<PaymentDetails> dco_decode_list_payment_details(dynamic raw);

  @protected
  List<PeerDetails> dco_decode_list_peer_details(dynamic raw);

  @protected
  List<PendingSweepBalance> dco_decode_list_pending_sweep_balance(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<PublicKey> dco_decode_list_public_key(dynamic raw);

  @protected
  List<SocketAddress> dco_decode_list_socket_address(dynamic raw);

  @protected
  LogLevel dco_decode_log_level(dynamic raw);

  @protected
  LSPFeeLimits dco_decode_lsp_fee_limits(dynamic raw);

  @protected
  MaxDustHTLCExposure dco_decode_max_dust_htlc_exposure(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  NodeException dco_decode_node_exception(dynamic raw);

  @protected
  NodeStatus dco_decode_node_status(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  ChainDataSourceConfig? dco_decode_opt_box_autoadd_chain_data_source_config(
      dynamic raw);

  @protected
  ChannelConfig? dco_decode_opt_box_autoadd_channel_config(dynamic raw);

  @protected
  ChannelId? dco_decode_opt_box_autoadd_channel_id(dynamic raw);

  @protected
  ClosureReason? dco_decode_opt_box_autoadd_closure_reason(dynamic raw);

  @protected
  EntropySourceConfig? dco_decode_opt_box_autoadd_entropy_source_config(
      dynamic raw);

  @protected
  Event? dco_decode_opt_box_autoadd_event(dynamic raw);

  @protected
  GossipSourceConfig? dco_decode_opt_box_autoadd_gossip_source_config(
      dynamic raw);

  @protected
  LiquiditySourceConfig? dco_decode_opt_box_autoadd_liquidity_source_config(
      dynamic raw);

  @protected
  MaxDustHTLCExposure? dco_decode_opt_box_autoadd_max_dust_htlc_exposure(
      dynamic raw);

  @protected
  OutPoint? dco_decode_opt_box_autoadd_out_point(dynamic raw);

  @protected
  PaymentDetails? dco_decode_opt_box_autoadd_payment_details(dynamic raw);

  @protected
  PaymentFailureReason? dco_decode_opt_box_autoadd_payment_failure_reason(
      dynamic raw);

  @protected
  PaymentId? dco_decode_opt_box_autoadd_payment_id(dynamic raw);

  @protected
  PaymentPreimage? dco_decode_opt_box_autoadd_payment_preimage(dynamic raw);

  @protected
  PaymentSecret? dco_decode_opt_box_autoadd_payment_secret(dynamic raw);

  @protected
  PublicKey? dco_decode_opt_box_autoadd_public_key(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_16(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  List<SocketAddress>? dco_decode_opt_list_socket_address(dynamic raw);

  @protected
  OutPoint dco_decode_out_point(dynamic raw);

  @protected
  PaymentDetails dco_decode_payment_details(dynamic raw);

  @protected
  PaymentDirection dco_decode_payment_direction(dynamic raw);

  @protected
  PaymentFailureReason dco_decode_payment_failure_reason(dynamic raw);

  @protected
  PaymentHash dco_decode_payment_hash(dynamic raw);

  @protected
  PaymentId dco_decode_payment_id(dynamic raw);

  @protected
  PaymentKind dco_decode_payment_kind(dynamic raw);

  @protected
  PaymentPreimage dco_decode_payment_preimage(dynamic raw);

  @protected
  PaymentSecret dco_decode_payment_secret(dynamic raw);

  @protected
  PaymentStatus dco_decode_payment_status(dynamic raw);

  @protected
  PeerDetails dco_decode_peer_details(dynamic raw);

  @protected
  PendingSweepBalance dco_decode_pending_sweep_balance(dynamic raw);

  @protected
  PublicKey dco_decode_public_key(dynamic raw);

  @protected
  (SocketAddress, PublicKey, String?)
      dco_decode_record_socket_address_public_key_opt_string(dynamic raw);

  @protected
  SocketAddress dco_decode_socket_address(dynamic raw);

  @protected
  Txid dco_decode_txid(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  U8Array12 dco_decode_u_8_array_12(dynamic raw);

  @protected
  U8Array16 dco_decode_u_8_array_16(dynamic raw);

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw);

  @protected
  U8Array4 dco_decode_u_8_array_4(dynamic raw);

  @protected
  U8Array64 dco_decode_u_8_array_64(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  UserChannelId dco_decode_user_channel_id(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  NodeBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
          SseDeserializer deserializer);

  @protected
  Node sse_decode_RustOpaque_Node(SseDeserializer deserializer);

  @protected
  NodeBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
          SseDeserializer deserializer);

  @protected
  LdkNodePaymentBolt11Payment
      sse_decode_RustOpaque_ldk_nodepaymentBolt11Payment(
          SseDeserializer deserializer);

  @protected
  LdkNodePaymentOnchainPayment
      sse_decode_RustOpaque_ldk_nodepaymentOnchainPayment(
          SseDeserializer deserializer);

  @protected
  LdkNodePaymentSpontaneousPayment
      sse_decode_RustOpaque_ldk_nodepaymentSpontaneousPayment(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  Address sse_decode_address(SseDeserializer deserializer);

  @protected
  BalanceDetails sse_decode_balance_details(SseDeserializer deserializer);

  @protected
  BestBlock sse_decode_best_block(SseDeserializer deserializer);

  @protected
  Bolt11Invoice sse_decode_bolt_11_invoice(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Address sse_decode_box_autoadd_address(SseDeserializer deserializer);

  @protected
  Bolt11Invoice sse_decode_box_autoadd_bolt_11_invoice(
      SseDeserializer deserializer);

  @protected
  ChainDataSourceConfig sse_decode_box_autoadd_chain_data_source_config(
      SseDeserializer deserializer);

  @protected
  ChannelConfig sse_decode_box_autoadd_channel_config(
      SseDeserializer deserializer);

  @protected
  ChannelId sse_decode_box_autoadd_channel_id(SseDeserializer deserializer);

  @protected
  ClosureReason sse_decode_box_autoadd_closure_reason(
      SseDeserializer deserializer);

  @protected
  Config sse_decode_box_autoadd_config(SseDeserializer deserializer);

  @protected
  EntropySourceConfig sse_decode_box_autoadd_entropy_source_config(
      SseDeserializer deserializer);

  @protected
  Event sse_decode_box_autoadd_event(SseDeserializer deserializer);

  @protected
  GossipSourceConfig sse_decode_box_autoadd_gossip_source_config(
      SseDeserializer deserializer);

  @protected
  LdkBolt11Payment sse_decode_box_autoadd_ldk_bolt_11_payment(
      SseDeserializer deserializer);

  @protected
  LdkMnemonic sse_decode_box_autoadd_ldk_mnemonic(SseDeserializer deserializer);

  @protected
  LdkNode sse_decode_box_autoadd_ldk_node(SseDeserializer deserializer);

  @protected
  LdkOnChainPayment sse_decode_box_autoadd_ldk_on_chain_payment(
      SseDeserializer deserializer);

  @protected
  LdkSpontaneousPayment sse_decode_box_autoadd_ldk_spontaneous_payment(
      SseDeserializer deserializer);

  @protected
  LiquiditySourceConfig sse_decode_box_autoadd_liquidity_source_config(
      SseDeserializer deserializer);

  @protected
  LSPFeeLimits sse_decode_box_autoadd_lsp_fee_limits(
      SseDeserializer deserializer);

  @protected
  MaxDustHTLCExposure sse_decode_box_autoadd_max_dust_htlc_exposure(
      SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_box_autoadd_out_point(SseDeserializer deserializer);

  @protected
  PaymentDetails sse_decode_box_autoadd_payment_details(
      SseDeserializer deserializer);

  @protected
  PaymentFailureReason sse_decode_box_autoadd_payment_failure_reason(
      SseDeserializer deserializer);

  @protected
  PaymentHash sse_decode_box_autoadd_payment_hash(SseDeserializer deserializer);

  @protected
  PaymentId sse_decode_box_autoadd_payment_id(SseDeserializer deserializer);

  @protected
  PaymentPreimage sse_decode_box_autoadd_payment_preimage(
      SseDeserializer deserializer);

  @protected
  PaymentSecret sse_decode_box_autoadd_payment_secret(
      SseDeserializer deserializer);

  @protected
  PublicKey sse_decode_box_autoadd_public_key(SseDeserializer deserializer);

  @protected
  SocketAddress sse_decode_box_autoadd_socket_address(
      SseDeserializer deserializer);

  @protected
  Txid sse_decode_box_autoadd_txid(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  UserChannelId sse_decode_box_autoadd_user_channel_id(
      SseDeserializer deserializer);

  @protected
  BuilderException sse_decode_builder_exception(SseDeserializer deserializer);

  @protected
  ChainDataSourceConfig sse_decode_chain_data_source_config(
      SseDeserializer deserializer);

  @protected
  ChannelConfig sse_decode_channel_config(SseDeserializer deserializer);

  @protected
  ChannelDetails sse_decode_channel_details(SseDeserializer deserializer);

  @protected
  ChannelId sse_decode_channel_id(SseDeserializer deserializer);

  @protected
  ClosureReason sse_decode_closure_reason(SseDeserializer deserializer);

  @protected
  Config sse_decode_config(SseDeserializer deserializer);

  @protected
  EntropySourceConfig sse_decode_entropy_source_config(
      SseDeserializer deserializer);

  @protected
  Event sse_decode_event(SseDeserializer deserializer);

  @protected
  GossipSourceConfig sse_decode_gossip_source_config(
      SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  LdkBolt11Payment sse_decode_ldk_bolt_11_payment(SseDeserializer deserializer);

  @protected
  LdkMnemonic sse_decode_ldk_mnemonic(SseDeserializer deserializer);

  @protected
  LdkNode sse_decode_ldk_node(SseDeserializer deserializer);

  @protected
  LdkOnChainPayment sse_decode_ldk_on_chain_payment(
      SseDeserializer deserializer);

  @protected
  LdkSpontaneousPayment sse_decode_ldk_spontaneous_payment(
      SseDeserializer deserializer);

  @protected
  LightningBalance sse_decode_lightning_balance(SseDeserializer deserializer);

  @protected
  LiquiditySourceConfig sse_decode_liquidity_source_config(
      SseDeserializer deserializer);

  @protected
  List<ChannelDetails> sse_decode_list_channel_details(
      SseDeserializer deserializer);

  @protected
  List<LightningBalance> sse_decode_list_lightning_balance(
      SseDeserializer deserializer);

  @protected
  List<PaymentDetails> sse_decode_list_payment_details(
      SseDeserializer deserializer);

  @protected
  List<PeerDetails> sse_decode_list_peer_details(SseDeserializer deserializer);

  @protected
  List<PendingSweepBalance> sse_decode_list_pending_sweep_balance(
      SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<PublicKey> sse_decode_list_public_key(SseDeserializer deserializer);

  @protected
  List<SocketAddress> sse_decode_list_socket_address(
      SseDeserializer deserializer);

  @protected
  LogLevel sse_decode_log_level(SseDeserializer deserializer);

  @protected
  LSPFeeLimits sse_decode_lsp_fee_limits(SseDeserializer deserializer);

  @protected
  MaxDustHTLCExposure sse_decode_max_dust_htlc_exposure(
      SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  NodeException sse_decode_node_exception(SseDeserializer deserializer);

  @protected
  NodeStatus sse_decode_node_status(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  ChainDataSourceConfig? sse_decode_opt_box_autoadd_chain_data_source_config(
      SseDeserializer deserializer);

  @protected
  ChannelConfig? sse_decode_opt_box_autoadd_channel_config(
      SseDeserializer deserializer);

  @protected
  ChannelId? sse_decode_opt_box_autoadd_channel_id(
      SseDeserializer deserializer);

  @protected
  ClosureReason? sse_decode_opt_box_autoadd_closure_reason(
      SseDeserializer deserializer);

  @protected
  EntropySourceConfig? sse_decode_opt_box_autoadd_entropy_source_config(
      SseDeserializer deserializer);

  @protected
  Event? sse_decode_opt_box_autoadd_event(SseDeserializer deserializer);

  @protected
  GossipSourceConfig? sse_decode_opt_box_autoadd_gossip_source_config(
      SseDeserializer deserializer);

  @protected
  LiquiditySourceConfig? sse_decode_opt_box_autoadd_liquidity_source_config(
      SseDeserializer deserializer);

  @protected
  MaxDustHTLCExposure? sse_decode_opt_box_autoadd_max_dust_htlc_exposure(
      SseDeserializer deserializer);

  @protected
  OutPoint? sse_decode_opt_box_autoadd_out_point(SseDeserializer deserializer);

  @protected
  PaymentDetails? sse_decode_opt_box_autoadd_payment_details(
      SseDeserializer deserializer);

  @protected
  PaymentFailureReason? sse_decode_opt_box_autoadd_payment_failure_reason(
      SseDeserializer deserializer);

  @protected
  PaymentId? sse_decode_opt_box_autoadd_payment_id(
      SseDeserializer deserializer);

  @protected
  PaymentPreimage? sse_decode_opt_box_autoadd_payment_preimage(
      SseDeserializer deserializer);

  @protected
  PaymentSecret? sse_decode_opt_box_autoadd_payment_secret(
      SseDeserializer deserializer);

  @protected
  PublicKey? sse_decode_opt_box_autoadd_public_key(
      SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  List<SocketAddress>? sse_decode_opt_list_socket_address(
      SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer);

  @protected
  PaymentDetails sse_decode_payment_details(SseDeserializer deserializer);

  @protected
  PaymentDirection sse_decode_payment_direction(SseDeserializer deserializer);

  @protected
  PaymentFailureReason sse_decode_payment_failure_reason(
      SseDeserializer deserializer);

  @protected
  PaymentHash sse_decode_payment_hash(SseDeserializer deserializer);

  @protected
  PaymentId sse_decode_payment_id(SseDeserializer deserializer);

  @protected
  PaymentKind sse_decode_payment_kind(SseDeserializer deserializer);

  @protected
  PaymentPreimage sse_decode_payment_preimage(SseDeserializer deserializer);

  @protected
  PaymentSecret sse_decode_payment_secret(SseDeserializer deserializer);

  @protected
  PaymentStatus sse_decode_payment_status(SseDeserializer deserializer);

  @protected
  PeerDetails sse_decode_peer_details(SseDeserializer deserializer);

  @protected
  PendingSweepBalance sse_decode_pending_sweep_balance(
      SseDeserializer deserializer);

  @protected
  PublicKey sse_decode_public_key(SseDeserializer deserializer);

  @protected
  (SocketAddress, PublicKey, String?)
      sse_decode_record_socket_address_public_key_opt_string(
          SseDeserializer deserializer);

  @protected
  SocketAddress sse_decode_socket_address(SseDeserializer deserializer);

  @protected
  Txid sse_decode_txid(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  U8Array12 sse_decode_u_8_array_12(SseDeserializer deserializer);

  @protected
  U8Array16 sse_decode_u_8_array_16(SseDeserializer deserializer);

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer);

  @protected
  U8Array4 sse_decode_u_8_array_4(SseDeserializer deserializer);

  @protected
  U8Array64 sse_decode_u_8_array_64(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  UserChannelId sse_decode_user_channel_id(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_address> cst_encode_box_autoadd_address(Address raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_address();
    cst_api_fill_to_wire_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bolt_11_invoice> cst_encode_box_autoadd_bolt_11_invoice(
      Bolt11Invoice raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bolt_11_invoice();
    cst_api_fill_to_wire_bolt_11_invoice(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_chain_data_source_config>
      cst_encode_box_autoadd_chain_data_source_config(
          ChainDataSourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_chain_data_source_config();
    cst_api_fill_to_wire_chain_data_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_channel_config> cst_encode_box_autoadd_channel_config(
      ChannelConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_channel_config();
    cst_api_fill_to_wire_channel_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_channel_id> cst_encode_box_autoadd_channel_id(
      ChannelId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_channel_id();
    cst_api_fill_to_wire_channel_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_closure_reason> cst_encode_box_autoadd_closure_reason(
      ClosureReason raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_closure_reason();
    cst_api_fill_to_wire_closure_reason(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_config> cst_encode_box_autoadd_config(Config raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_config();
    cst_api_fill_to_wire_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_entropy_source_config>
      cst_encode_box_autoadd_entropy_source_config(EntropySourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_entropy_source_config();
    cst_api_fill_to_wire_entropy_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_event> cst_encode_box_autoadd_event(Event raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_event();
    cst_api_fill_to_wire_event(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_gossip_source_config>
      cst_encode_box_autoadd_gossip_source_config(GossipSourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_gossip_source_config();
    cst_api_fill_to_wire_gossip_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ldk_bolt_11_payment>
      cst_encode_box_autoadd_ldk_bolt_11_payment(LdkBolt11Payment raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ldk_bolt_11_payment();
    cst_api_fill_to_wire_ldk_bolt_11_payment(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ldk_mnemonic> cst_encode_box_autoadd_ldk_mnemonic(
      LdkMnemonic raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ldk_mnemonic();
    cst_api_fill_to_wire_ldk_mnemonic(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ldk_node> cst_encode_box_autoadd_ldk_node(LdkNode raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ldk_node();
    cst_api_fill_to_wire_ldk_node(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ldk_on_chain_payment>
      cst_encode_box_autoadd_ldk_on_chain_payment(LdkOnChainPayment raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ldk_on_chain_payment();
    cst_api_fill_to_wire_ldk_on_chain_payment(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ldk_spontaneous_payment>
      cst_encode_box_autoadd_ldk_spontaneous_payment(
          LdkSpontaneousPayment raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ldk_spontaneous_payment();
    cst_api_fill_to_wire_ldk_spontaneous_payment(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_liquidity_source_config>
      cst_encode_box_autoadd_liquidity_source_config(
          LiquiditySourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_liquidity_source_config();
    cst_api_fill_to_wire_liquidity_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_lsp_fee_limits> cst_encode_box_autoadd_lsp_fee_limits(
      LSPFeeLimits raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_lsp_fee_limits();
    cst_api_fill_to_wire_lsp_fee_limits(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_max_dust_htlc_exposure>
      cst_encode_box_autoadd_max_dust_htlc_exposure(MaxDustHTLCExposure raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_max_dust_htlc_exposure();
    cst_api_fill_to_wire_max_dust_htlc_exposure(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_out_point> cst_encode_box_autoadd_out_point(
      OutPoint raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_out_point();
    cst_api_fill_to_wire_out_point(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_payment_details> cst_encode_box_autoadd_payment_details(
      PaymentDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_details();
    cst_api_fill_to_wire_payment_details(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_payment_failure_reason(
      PaymentFailureReason raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_payment_failure_reason(
        cst_encode_payment_failure_reason(raw));
  }

  @protected
  ffi.Pointer<wire_cst_payment_hash> cst_encode_box_autoadd_payment_hash(
      PaymentHash raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_hash();
    cst_api_fill_to_wire_payment_hash(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_payment_id> cst_encode_box_autoadd_payment_id(
      PaymentId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_id();
    cst_api_fill_to_wire_payment_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_payment_preimage>
      cst_encode_box_autoadd_payment_preimage(PaymentPreimage raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_preimage();
    cst_api_fill_to_wire_payment_preimage(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_payment_secret> cst_encode_box_autoadd_payment_secret(
      PaymentSecret raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_secret();
    cst_api_fill_to_wire_payment_secret(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_public_key> cst_encode_box_autoadd_public_key(
      PublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_public_key();
    cst_api_fill_to_wire_public_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_socket_address> cst_encode_box_autoadd_socket_address(
      SocketAddress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_socket_address();
    cst_api_fill_to_wire_socket_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_txid> cst_encode_box_autoadd_txid(Txid raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_txid();
    cst_api_fill_to_wire_txid(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint16> cst_encode_box_autoadd_u_16(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_16(cst_encode_u_16(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_box_autoadd_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_32(cst_encode_u_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_box_autoadd_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_64(cst_encode_u_64(raw));
  }

  @protected
  ffi.Pointer<wire_cst_user_channel_id> cst_encode_box_autoadd_user_channel_id(
      UserChannelId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_user_channel_id();
    cst_api_fill_to_wire_user_channel_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_channel_details> cst_encode_list_channel_details(
      List<ChannelDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_channel_details(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_channel_details(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_lightning_balance>
      cst_encode_list_lightning_balance(List<LightningBalance> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_lightning_balance(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_lightning_balance(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_payment_details> cst_encode_list_payment_details(
      List<PaymentDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_payment_details(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_payment_details(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_peer_details> cst_encode_list_peer_details(
      List<PeerDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_peer_details(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_peer_details(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_pending_sweep_balance>
      cst_encode_list_pending_sweep_balance(List<PendingSweepBalance> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_pending_sweep_balance(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_pending_sweep_balance(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
      List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_public_key> cst_encode_list_public_key(
      List<PublicKey> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_public_key(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_public_key(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_socket_address> cst_encode_list_socket_address(
      List<SocketAddress> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_socket_address(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_socket_address(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
      String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_chain_data_source_config>
      cst_encode_opt_box_autoadd_chain_data_source_config(
          ChainDataSourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_chain_data_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_channel_config>
      cst_encode_opt_box_autoadd_channel_config(ChannelConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_channel_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_channel_id> cst_encode_opt_box_autoadd_channel_id(
      ChannelId? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_channel_id(raw);
  }

  @protected
  ffi.Pointer<wire_cst_closure_reason>
      cst_encode_opt_box_autoadd_closure_reason(ClosureReason? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_closure_reason(raw);
  }

  @protected
  ffi.Pointer<wire_cst_entropy_source_config>
      cst_encode_opt_box_autoadd_entropy_source_config(
          EntropySourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_entropy_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_event> cst_encode_opt_box_autoadd_event(Event? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_event(raw);
  }

  @protected
  ffi.Pointer<wire_cst_gossip_source_config>
      cst_encode_opt_box_autoadd_gossip_source_config(GossipSourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_gossip_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_liquidity_source_config>
      cst_encode_opt_box_autoadd_liquidity_source_config(
          LiquiditySourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_liquidity_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_max_dust_htlc_exposure>
      cst_encode_opt_box_autoadd_max_dust_htlc_exposure(
          MaxDustHTLCExposure? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_max_dust_htlc_exposure(raw);
  }

  @protected
  ffi.Pointer<wire_cst_out_point> cst_encode_opt_box_autoadd_out_point(
      OutPoint? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_out_point(raw);
  }

  @protected
  ffi.Pointer<wire_cst_payment_details>
      cst_encode_opt_box_autoadd_payment_details(PaymentDetails? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_payment_details(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_payment_failure_reason(
      PaymentFailureReason? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_payment_failure_reason(raw);
  }

  @protected
  ffi.Pointer<wire_cst_payment_id> cst_encode_opt_box_autoadd_payment_id(
      PaymentId? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_payment_id(raw);
  }

  @protected
  ffi.Pointer<wire_cst_payment_preimage>
      cst_encode_opt_box_autoadd_payment_preimage(PaymentPreimage? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_payment_preimage(raw);
  }

  @protected
  ffi.Pointer<wire_cst_payment_secret>
      cst_encode_opt_box_autoadd_payment_secret(PaymentSecret? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_payment_secret(raw);
  }

  @protected
  ffi.Pointer<wire_cst_public_key> cst_encode_opt_box_autoadd_public_key(
      PublicKey? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_public_key(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint16> cst_encode_opt_box_autoadd_u_16(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_16(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_opt_box_autoadd_u_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_opt_box_autoadd_u_64(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_socket_address> cst_encode_opt_list_socket_address(
      List<SocketAddress>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_socket_address(raw);
  }

  @protected
  int cst_encode_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_12(
      U8Array12 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(12);
    ans.ref.ptr.asTypedList(12).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_16(
      U8Array16 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(16);
    ans.ref.ptr.asTypedList(16).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_32(
      U8Array32 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(32);
    ans.ref.ptr.asTypedList(32).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_4(
      U8Array4 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(4);
    ans.ref.ptr.asTypedList(4).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_64(
      U8Array64 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(64);
    ans.ref.ptr.asTypedList(64).setAll(0, raw);
    return ans;
  }

  @protected
  void cst_api_fill_to_wire_address(Address apiObj, wire_cst_address wireObj) {
    wireObj.s = cst_encode_String(apiObj.s);
  }

  @protected
  void cst_api_fill_to_wire_balance_details(
      BalanceDetails apiObj, wire_cst_balance_details wireObj) {
    wireObj.total_onchain_balance_sats =
        cst_encode_u_64(apiObj.totalOnchainBalanceSats);
    wireObj.spendable_onchain_balance_sats =
        cst_encode_u_64(apiObj.spendableOnchainBalanceSats);
    wireObj.total_lightning_balance_sats =
        cst_encode_u_64(apiObj.totalLightningBalanceSats);
    wireObj.lightning_balances =
        cst_encode_list_lightning_balance(apiObj.lightningBalances);
    wireObj.pending_balances_from_channel_closures =
        cst_encode_list_pending_sweep_balance(
            apiObj.pendingBalancesFromChannelClosures);
  }

  @protected
  void cst_api_fill_to_wire_best_block(
      BestBlock apiObj, wire_cst_best_block wireObj) {
    wireObj.block_hash = cst_encode_String(apiObj.blockHash);
    wireObj.height = cst_encode_u_32(apiObj.height);
  }

  @protected
  void cst_api_fill_to_wire_bolt_11_invoice(
      Bolt11Invoice apiObj, wire_cst_bolt_11_invoice wireObj) {
    wireObj.signed_raw_invoice = cst_encode_String(apiObj.signedRawInvoice);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_address(
      Address apiObj, ffi.Pointer<wire_cst_address> wireObj) {
    cst_api_fill_to_wire_address(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bolt_11_invoice(
      Bolt11Invoice apiObj, ffi.Pointer<wire_cst_bolt_11_invoice> wireObj) {
    cst_api_fill_to_wire_bolt_11_invoice(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig apiObj,
      ffi.Pointer<wire_cst_chain_data_source_config> wireObj) {
    cst_api_fill_to_wire_chain_data_source_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_channel_config(
      ChannelConfig apiObj, ffi.Pointer<wire_cst_channel_config> wireObj) {
    cst_api_fill_to_wire_channel_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_channel_id(
      ChannelId apiObj, ffi.Pointer<wire_cst_channel_id> wireObj) {
    cst_api_fill_to_wire_channel_id(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_closure_reason(
      ClosureReason apiObj, ffi.Pointer<wire_cst_closure_reason> wireObj) {
    cst_api_fill_to_wire_closure_reason(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_config(
      Config apiObj, ffi.Pointer<wire_cst_config> wireObj) {
    cst_api_fill_to_wire_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_entropy_source_config(
      EntropySourceConfig apiObj,
      ffi.Pointer<wire_cst_entropy_source_config> wireObj) {
    cst_api_fill_to_wire_entropy_source_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_event(
      Event apiObj, ffi.Pointer<wire_cst_event> wireObj) {
    cst_api_fill_to_wire_event(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_gossip_source_config(
      GossipSourceConfig apiObj,
      ffi.Pointer<wire_cst_gossip_source_config> wireObj) {
    cst_api_fill_to_wire_gossip_source_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ldk_bolt_11_payment(
      LdkBolt11Payment apiObj,
      ffi.Pointer<wire_cst_ldk_bolt_11_payment> wireObj) {
    cst_api_fill_to_wire_ldk_bolt_11_payment(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ldk_mnemonic(
      LdkMnemonic apiObj, ffi.Pointer<wire_cst_ldk_mnemonic> wireObj) {
    cst_api_fill_to_wire_ldk_mnemonic(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ldk_node(
      LdkNode apiObj, ffi.Pointer<wire_cst_ldk_node> wireObj) {
    cst_api_fill_to_wire_ldk_node(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ldk_on_chain_payment(
      LdkOnChainPayment apiObj,
      ffi.Pointer<wire_cst_ldk_on_chain_payment> wireObj) {
    cst_api_fill_to_wire_ldk_on_chain_payment(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ldk_spontaneous_payment(
      LdkSpontaneousPayment apiObj,
      ffi.Pointer<wire_cst_ldk_spontaneous_payment> wireObj) {
    cst_api_fill_to_wire_ldk_spontaneous_payment(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_liquidity_source_config(
      LiquiditySourceConfig apiObj,
      ffi.Pointer<wire_cst_liquidity_source_config> wireObj) {
    cst_api_fill_to_wire_liquidity_source_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_lsp_fee_limits(
      LSPFeeLimits apiObj, ffi.Pointer<wire_cst_lsp_fee_limits> wireObj) {
    cst_api_fill_to_wire_lsp_fee_limits(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_max_dust_htlc_exposure(
      MaxDustHTLCExposure apiObj,
      ffi.Pointer<wire_cst_max_dust_htlc_exposure> wireObj) {
    cst_api_fill_to_wire_max_dust_htlc_exposure(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_out_point(
      OutPoint apiObj, ffi.Pointer<wire_cst_out_point> wireObj) {
    cst_api_fill_to_wire_out_point(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_details(
      PaymentDetails apiObj, ffi.Pointer<wire_cst_payment_details> wireObj) {
    cst_api_fill_to_wire_payment_details(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_hash(
      PaymentHash apiObj, ffi.Pointer<wire_cst_payment_hash> wireObj) {
    cst_api_fill_to_wire_payment_hash(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_id(
      PaymentId apiObj, ffi.Pointer<wire_cst_payment_id> wireObj) {
    cst_api_fill_to_wire_payment_id(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_preimage(
      PaymentPreimage apiObj, ffi.Pointer<wire_cst_payment_preimage> wireObj) {
    cst_api_fill_to_wire_payment_preimage(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_secret(
      PaymentSecret apiObj, ffi.Pointer<wire_cst_payment_secret> wireObj) {
    cst_api_fill_to_wire_payment_secret(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_public_key(
      PublicKey apiObj, ffi.Pointer<wire_cst_public_key> wireObj) {
    cst_api_fill_to_wire_public_key(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_socket_address(
      SocketAddress apiObj, ffi.Pointer<wire_cst_socket_address> wireObj) {
    cst_api_fill_to_wire_socket_address(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_txid(
      Txid apiObj, ffi.Pointer<wire_cst_txid> wireObj) {
    cst_api_fill_to_wire_txid(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_user_channel_id(
      UserChannelId apiObj, ffi.Pointer<wire_cst_user_channel_id> wireObj) {
    cst_api_fill_to_wire_user_channel_id(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_chain_data_source_config(
      ChainDataSourceConfig apiObj, wire_cst_chain_data_source_config wireObj) {
    if (apiObj is ChainDataSourceConfig_Esplora) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Esplora.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_channel_config(
      ChannelConfig apiObj, wire_cst_channel_config wireObj) {
    wireObj.forwarding_fee_proportional_millionths =
        cst_encode_u_32(apiObj.forwardingFeeProportionalMillionths);
    wireObj.forwarding_fee_base_msat =
        cst_encode_u_32(apiObj.forwardingFeeBaseMsat);
    wireObj.cltv_expiry_delta = cst_encode_u_16(apiObj.cltvExpiryDelta);
    wireObj.max_dust_htlc_exposure =
        cst_encode_opt_box_autoadd_max_dust_htlc_exposure(
            apiObj.maxDustHtlcExposure);
    wireObj.force_close_avoidance_max_fee_satoshis =
        cst_encode_u_64(apiObj.forceCloseAvoidanceMaxFeeSatoshis);
    wireObj.accept_underpaying_htlcs =
        cst_encode_bool(apiObj.acceptUnderpayingHtlcs);
  }

  @protected
  void cst_api_fill_to_wire_channel_details(
      ChannelDetails apiObj, wire_cst_channel_details wireObj) {
    cst_api_fill_to_wire_channel_id(apiObj.channelId, wireObj.channel_id);
    cst_api_fill_to_wire_public_key(
        apiObj.counterpartyNodeId, wireObj.counterparty_node_id);
    wireObj.funding_txo =
        cst_encode_opt_box_autoadd_out_point(apiObj.fundingTxo);
    wireObj.channel_value_sats = cst_encode_u_64(apiObj.channelValueSats);
    wireObj.unspendable_punishment_reserve =
        cst_encode_opt_box_autoadd_u_64(apiObj.unspendablePunishmentReserve);
    cst_api_fill_to_wire_user_channel_id(
        apiObj.userChannelId, wireObj.user_channel_id);
    wireObj.feerate_sat_per_1000_weight =
        cst_encode_u_32(apiObj.feerateSatPer1000Weight);
    wireObj.outbound_capacity_msat =
        cst_encode_u_64(apiObj.outboundCapacityMsat);
    wireObj.inbound_capacity_msat = cst_encode_u_64(apiObj.inboundCapacityMsat);
    wireObj.confirmations_required =
        cst_encode_opt_box_autoadd_u_32(apiObj.confirmationsRequired);
    wireObj.confirmations =
        cst_encode_opt_box_autoadd_u_32(apiObj.confirmations);
    wireObj.is_outbound = cst_encode_bool(apiObj.isOutbound);
    wireObj.is_channel_ready = cst_encode_bool(apiObj.isChannelReady);
    wireObj.is_usable = cst_encode_bool(apiObj.isUsable);
    wireObj.is_public = cst_encode_bool(apiObj.isPublic);
    wireObj.cltv_expiry_delta =
        cst_encode_opt_box_autoadd_u_16(apiObj.cltvExpiryDelta);
    wireObj.counterparty_unspendable_punishment_reserve =
        cst_encode_u_64(apiObj.counterpartyUnspendablePunishmentReserve);
    wireObj.counterparty_outbound_htlc_minimum_msat =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.counterpartyOutboundHtlcMinimumMsat);
    wireObj.counterparty_outbound_htlc_maximum_msat =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.counterpartyOutboundHtlcMaximumMsat);
    wireObj.counterparty_forwarding_info_fee_base_msat =
        cst_encode_opt_box_autoadd_u_32(
            apiObj.counterpartyForwardingInfoFeeBaseMsat);
    wireObj.counterparty_forwarding_info_fee_proportional_millionths =
        cst_encode_opt_box_autoadd_u_32(
            apiObj.counterpartyForwardingInfoFeeProportionalMillionths);
    wireObj.counterparty_forwarding_info_cltv_expiry_delta =
        cst_encode_opt_box_autoadd_u_16(
            apiObj.counterpartyForwardingInfoCltvExpiryDelta);
    wireObj.next_outbound_htlc_limit_msat =
        cst_encode_u_64(apiObj.nextOutboundHtlcLimitMsat);
    wireObj.next_outbound_htlc_minimum_msat =
        cst_encode_u_64(apiObj.nextOutboundHtlcMinimumMsat);
    wireObj.force_close_spend_delay =
        cst_encode_opt_box_autoadd_u_16(apiObj.forceCloseSpendDelay);
    wireObj.inbound_htlc_minimum_msat =
        cst_encode_u_64(apiObj.inboundHtlcMinimumMsat);
    wireObj.inbound_htlc_maximum_msat =
        cst_encode_opt_box_autoadd_u_64(apiObj.inboundHtlcMaximumMsat);
    cst_api_fill_to_wire_channel_config(apiObj.config, wireObj.config);
  }

  @protected
  void cst_api_fill_to_wire_channel_id(
      ChannelId apiObj, wire_cst_channel_id wireObj) {
    wireObj.data = cst_encode_u_8_array_32(apiObj.data);
  }

  @protected
  void cst_api_fill_to_wire_closure_reason(
      ClosureReason apiObj, wire_cst_closure_reason wireObj) {
    if (apiObj is ClosureReason_CounterpartyForceClosed) {
      var pre_peer_msg = cst_encode_String(apiObj.peerMsg);
      wireObj.tag = 0;
      wireObj.kind.CounterpartyForceClosed.peer_msg = pre_peer_msg;
      return;
    }
    if (apiObj is ClosureReason_HolderForceClosed) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is ClosureReason_LegacyCooperativeClosure) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is ClosureReason_CounterpartyInitiatedCooperativeClosure) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is ClosureReason_LocallyInitiatedCooperativeClosure) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is ClosureReason_CommitmentTxConfirmed) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is ClosureReason_FundingTimedOut) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is ClosureReason_ProcessingError) {
      var pre_err = cst_encode_String(apiObj.err);
      wireObj.tag = 7;
      wireObj.kind.ProcessingError.err = pre_err;
      return;
    }
    if (apiObj is ClosureReason_DisconnectedPeer) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is ClosureReason_OutdatedChannelManager) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is ClosureReason_CounterpartyCoopClosedUnfundedChannel) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is ClosureReason_FundingBatchClosure) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is ClosureReason_HTLCsTimedOut) {
      wireObj.tag = 12;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_config(Config apiObj, wire_cst_config wireObj) {
    wireObj.storage_dir_path = cst_encode_String(apiObj.storageDirPath);
    wireObj.log_dir_path = cst_encode_opt_String(apiObj.logDirPath);
    wireObj.network = cst_encode_network(apiObj.network);
    wireObj.listening_addresses =
        cst_encode_opt_list_socket_address(apiObj.listeningAddresses);
    wireObj.default_cltv_expiry_delta =
        cst_encode_u_32(apiObj.defaultCltvExpiryDelta);
    wireObj.onchain_wallet_sync_interval_secs =
        cst_encode_u_64(apiObj.onchainWalletSyncIntervalSecs);
    wireObj.wallet_sync_interval_secs =
        cst_encode_u_64(apiObj.walletSyncIntervalSecs);
    wireObj.fee_rate_cache_update_interval_secs =
        cst_encode_u_64(apiObj.feeRateCacheUpdateIntervalSecs);
    wireObj.trusted_peers_0conf =
        cst_encode_list_public_key(apiObj.trustedPeers0Conf);
    wireObj.probing_liquidity_limit_multiplier =
        cst_encode_u_64(apiObj.probingLiquidityLimitMultiplier);
    wireObj.log_level = cst_encode_log_level(apiObj.logLevel);
  }

  @protected
  void cst_api_fill_to_wire_entropy_source_config(
      EntropySourceConfig apiObj, wire_cst_entropy_source_config wireObj) {
    if (apiObj is EntropySourceConfig_SeedFile) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.SeedFile.field0 = pre_field0;
      return;
    }
    if (apiObj is EntropySourceConfig_SeedBytes) {
      var pre_field0 = cst_encode_u_8_array_64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.SeedBytes.field0 = pre_field0;
      return;
    }
    if (apiObj is EntropySourceConfig_Bip39Mnemonic) {
      var pre_mnemonic = cst_encode_box_autoadd_ldk_mnemonic(apiObj.mnemonic);
      var pre_passphrase = cst_encode_opt_String(apiObj.passphrase);
      wireObj.tag = 2;
      wireObj.kind.Bip39Mnemonic.mnemonic = pre_mnemonic;
      wireObj.kind.Bip39Mnemonic.passphrase = pre_passphrase;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_event(Event apiObj, wire_cst_event wireObj) {
    if (apiObj is Event_PaymentSuccessful) {
      var pre_payment_id =
          cst_encode_opt_box_autoadd_payment_id(apiObj.paymentId);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      var pre_fee_paid_msat =
          cst_encode_opt_box_autoadd_u_64(apiObj.feePaidMsat);
      wireObj.tag = 0;
      wireObj.kind.PaymentSuccessful.payment_id = pre_payment_id;
      wireObj.kind.PaymentSuccessful.payment_hash = pre_payment_hash;
      wireObj.kind.PaymentSuccessful.fee_paid_msat = pre_fee_paid_msat;
      return;
    }
    if (apiObj is Event_PaymentFailed) {
      var pre_payment_id =
          cst_encode_opt_box_autoadd_payment_id(apiObj.paymentId);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      var pre_reason =
          cst_encode_opt_box_autoadd_payment_failure_reason(apiObj.reason);
      wireObj.tag = 1;
      wireObj.kind.PaymentFailed.payment_id = pre_payment_id;
      wireObj.kind.PaymentFailed.payment_hash = pre_payment_hash;
      wireObj.kind.PaymentFailed.reason = pre_reason;
      return;
    }
    if (apiObj is Event_PaymentReceived) {
      var pre_payment_id =
          cst_encode_opt_box_autoadd_payment_id(apiObj.paymentId);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      var pre_amount_msat = cst_encode_u_64(apiObj.amountMsat);
      wireObj.tag = 2;
      wireObj.kind.PaymentReceived.payment_id = pre_payment_id;
      wireObj.kind.PaymentReceived.payment_hash = pre_payment_hash;
      wireObj.kind.PaymentReceived.amount_msat = pre_amount_msat;
      return;
    }
    if (apiObj is Event_ChannelPending) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_user_channel_id =
          cst_encode_box_autoadd_user_channel_id(apiObj.userChannelId);
      var pre_former_temporary_channel_id =
          cst_encode_box_autoadd_channel_id(apiObj.formerTemporaryChannelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_funding_txo = cst_encode_box_autoadd_out_point(apiObj.fundingTxo);
      wireObj.tag = 3;
      wireObj.kind.ChannelPending.channel_id = pre_channel_id;
      wireObj.kind.ChannelPending.user_channel_id = pre_user_channel_id;
      wireObj.kind.ChannelPending.former_temporary_channel_id =
          pre_former_temporary_channel_id;
      wireObj.kind.ChannelPending.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.ChannelPending.funding_txo = pre_funding_txo;
      return;
    }
    if (apiObj is Event_ChannelReady) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_user_channel_id =
          cst_encode_box_autoadd_user_channel_id(apiObj.userChannelId);
      var pre_counterparty_node_id =
          cst_encode_opt_box_autoadd_public_key(apiObj.counterpartyNodeId);
      wireObj.tag = 4;
      wireObj.kind.ChannelReady.channel_id = pre_channel_id;
      wireObj.kind.ChannelReady.user_channel_id = pre_user_channel_id;
      wireObj.kind.ChannelReady.counterparty_node_id = pre_counterparty_node_id;
      return;
    }
    if (apiObj is Event_ChannelClosed) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_user_channel_id =
          cst_encode_box_autoadd_user_channel_id(apiObj.userChannelId);
      var pre_counterparty_node_id =
          cst_encode_opt_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_reason = cst_encode_opt_box_autoadd_closure_reason(apiObj.reason);
      wireObj.tag = 5;
      wireObj.kind.ChannelClosed.channel_id = pre_channel_id;
      wireObj.kind.ChannelClosed.user_channel_id = pre_user_channel_id;
      wireObj.kind.ChannelClosed.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.ChannelClosed.reason = pre_reason;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_gossip_source_config(
      GossipSourceConfig apiObj, wire_cst_gossip_source_config wireObj) {
    if (apiObj is GossipSourceConfig_P2PNetwork) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is GossipSourceConfig_RapidGossipSync) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.RapidGossipSync.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_ldk_bolt_11_payment(
      LdkBolt11Payment apiObj, wire_cst_ldk_bolt_11_payment wireObj) {
    wireObj.ptr =
        cst_encode_RustOpaque_ldk_nodepaymentBolt11Payment(apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_ldk_mnemonic(
      LdkMnemonic apiObj, wire_cst_ldk_mnemonic wireObj) {
    wireObj.seed_phrase = cst_encode_String(apiObj.seedPhrase);
  }

  @protected
  void cst_api_fill_to_wire_ldk_node(
      LdkNode apiObj, wire_cst_ldk_node wireObj) {
    wireObj.ptr = cst_encode_RustOpaque_Node(apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_ldk_on_chain_payment(
      LdkOnChainPayment apiObj, wire_cst_ldk_on_chain_payment wireObj) {
    wireObj.ptr =
        cst_encode_RustOpaque_ldk_nodepaymentOnchainPayment(apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_ldk_spontaneous_payment(
      LdkSpontaneousPayment apiObj, wire_cst_ldk_spontaneous_payment wireObj) {
    wireObj.ptr =
        cst_encode_RustOpaque_ldk_nodepaymentSpontaneousPayment(apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_lightning_balance(
      LightningBalance apiObj, wire_cst_lightning_balance wireObj) {
    if (apiObj is LightningBalance_ClaimableOnChannelClose) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      wireObj.tag = 0;
      wireObj.kind.ClaimableOnChannelClose.channel_id = pre_channel_id;
      wireObj.kind.ClaimableOnChannelClose.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.ClaimableOnChannelClose.amount_satoshis =
          pre_amount_satoshis;
      return;
    }
    if (apiObj is LightningBalance_ClaimableAwaitingConfirmations) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      var pre_confirmation_height = cst_encode_u_32(apiObj.confirmationHeight);
      wireObj.tag = 1;
      wireObj.kind.ClaimableAwaitingConfirmations.channel_id = pre_channel_id;
      wireObj.kind.ClaimableAwaitingConfirmations.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.ClaimableAwaitingConfirmations.amount_satoshis =
          pre_amount_satoshis;
      wireObj.kind.ClaimableAwaitingConfirmations.confirmation_height =
          pre_confirmation_height;
      return;
    }
    if (apiObj is LightningBalance_ContentiousClaimable) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      var pre_timeout_height = cst_encode_u_32(apiObj.timeoutHeight);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      var pre_payment_preimage =
          cst_encode_box_autoadd_payment_preimage(apiObj.paymentPreimage);
      wireObj.tag = 2;
      wireObj.kind.ContentiousClaimable.channel_id = pre_channel_id;
      wireObj.kind.ContentiousClaimable.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.ContentiousClaimable.amount_satoshis = pre_amount_satoshis;
      wireObj.kind.ContentiousClaimable.timeout_height = pre_timeout_height;
      wireObj.kind.ContentiousClaimable.payment_hash = pre_payment_hash;
      wireObj.kind.ContentiousClaimable.payment_preimage = pre_payment_preimage;
      return;
    }
    if (apiObj is LightningBalance_MaybeTimeoutClaimableHTLC) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      var pre_claimable_height = cst_encode_u_32(apiObj.claimableHeight);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      wireObj.tag = 3;
      wireObj.kind.MaybeTimeoutClaimableHTLC.channel_id = pre_channel_id;
      wireObj.kind.MaybeTimeoutClaimableHTLC.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.MaybeTimeoutClaimableHTLC.amount_satoshis =
          pre_amount_satoshis;
      wireObj.kind.MaybeTimeoutClaimableHTLC.claimable_height =
          pre_claimable_height;
      wireObj.kind.MaybeTimeoutClaimableHTLC.payment_hash = pre_payment_hash;
      return;
    }
    if (apiObj is LightningBalance_MaybePreimageClaimableHTLC) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      var pre_expiry_height = cst_encode_u_32(apiObj.expiryHeight);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      wireObj.tag = 4;
      wireObj.kind.MaybePreimageClaimableHTLC.channel_id = pre_channel_id;
      wireObj.kind.MaybePreimageClaimableHTLC.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.MaybePreimageClaimableHTLC.amount_satoshis =
          pre_amount_satoshis;
      wireObj.kind.MaybePreimageClaimableHTLC.expiry_height = pre_expiry_height;
      wireObj.kind.MaybePreimageClaimableHTLC.payment_hash = pre_payment_hash;
      return;
    }
    if (apiObj is LightningBalance_CounterpartyRevokedOutputClaimable) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      wireObj.tag = 5;
      wireObj.kind.CounterpartyRevokedOutputClaimable.channel_id =
          pre_channel_id;
      wireObj.kind.CounterpartyRevokedOutputClaimable.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.CounterpartyRevokedOutputClaimable.amount_satoshis =
          pre_amount_satoshis;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_liquidity_source_config(
      LiquiditySourceConfig apiObj, wire_cst_liquidity_source_config wireObj) {
    cst_api_fill_to_wire_record_socket_address_public_key_opt_string(
        apiObj.lsps2Service, wireObj.lsps2_service);
  }

  @protected
  void cst_api_fill_to_wire_lsp_fee_limits(
      LSPFeeLimits apiObj, wire_cst_lsp_fee_limits wireObj) {
    wireObj.max_total_opening_fee_msat =
        cst_encode_opt_box_autoadd_u_64(apiObj.maxTotalOpeningFeeMsat);
    wireObj.max_proportional_opening_fee_ppm_msat =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.maxProportionalOpeningFeePpmMsat);
  }

  @protected
  void cst_api_fill_to_wire_max_dust_htlc_exposure(
      MaxDustHTLCExposure apiObj, wire_cst_max_dust_htlc_exposure wireObj) {
    if (apiObj is MaxDustHTLCExposure_FixedLimitMsat) {
      var pre_field0 = cst_encode_u_64(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.FixedLimitMsat.field0 = pre_field0;
      return;
    }
    if (apiObj is MaxDustHTLCExposure_FeeRateMultiplier) {
      var pre_field0 = cst_encode_u_64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.FeeRateMultiplier.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_node_status(
      NodeStatus apiObj, wire_cst_node_status wireObj) {
    wireObj.is_running = cst_encode_bool(apiObj.isRunning);
    wireObj.is_listening = cst_encode_bool(apiObj.isListening);
    cst_api_fill_to_wire_best_block(
        apiObj.currentBestBlock, wireObj.current_best_block);
    wireObj.latest_wallet_sync_timestamp =
        cst_encode_opt_box_autoadd_u_64(apiObj.latestWalletSyncTimestamp);
    wireObj.latest_onchain_wallet_sync_timestamp =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.latestOnchainWalletSyncTimestamp);
    wireObj.latest_fee_rate_cache_update_timestamp =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.latestFeeRateCacheUpdateTimestamp);
    wireObj.latest_rgs_snapshot_timestamp =
        cst_encode_opt_box_autoadd_u_64(apiObj.latestRgsSnapshotTimestamp);
    wireObj.latest_node_announcement_broadcast_timestamp =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.latestNodeAnnouncementBroadcastTimestamp);
  }

  @protected
  void cst_api_fill_to_wire_out_point(
      OutPoint apiObj, wire_cst_out_point wireObj) {
    cst_api_fill_to_wire_txid(apiObj.txid, wireObj.txid);
    wireObj.vout = cst_encode_u_32(apiObj.vout);
  }

  @protected
  void cst_api_fill_to_wire_payment_details(
      PaymentDetails apiObj, wire_cst_payment_details wireObj) {
    cst_api_fill_to_wire_payment_id(apiObj.id, wireObj.id);
    cst_api_fill_to_wire_payment_kind(apiObj.kind, wireObj.kind);
    wireObj.amount_msat = cst_encode_opt_box_autoadd_u_64(apiObj.amountMsat);
    wireObj.direction = cst_encode_payment_direction(apiObj.direction);
    wireObj.status = cst_encode_payment_status(apiObj.status);
  }

  @protected
  void cst_api_fill_to_wire_payment_hash(
      PaymentHash apiObj, wire_cst_payment_hash wireObj) {
    wireObj.data = cst_encode_u_8_array_32(apiObj.data);
  }

  @protected
  void cst_api_fill_to_wire_payment_id(
      PaymentId apiObj, wire_cst_payment_id wireObj) {
    wireObj.field0 = cst_encode_u_8_array_32(apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_payment_kind(
      PaymentKind apiObj, wire_cst_payment_kind wireObj) {
    if (apiObj is PaymentKind_Onchain) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is PaymentKind_Bolt11) {
      var pre_hash = cst_encode_box_autoadd_payment_hash(apiObj.hash);
      var pre_preimage =
          cst_encode_opt_box_autoadd_payment_preimage(apiObj.preimage);
      var pre_secret = cst_encode_opt_box_autoadd_payment_secret(apiObj.secret);
      wireObj.tag = 1;
      wireObj.kind.Bolt11.hash = pre_hash;
      wireObj.kind.Bolt11.preimage = pre_preimage;
      wireObj.kind.Bolt11.secret = pre_secret;
      return;
    }
    if (apiObj is PaymentKind_Bolt11Jit) {
      var pre_hash = cst_encode_box_autoadd_payment_hash(apiObj.hash);
      var pre_preimage =
          cst_encode_opt_box_autoadd_payment_preimage(apiObj.preimage);
      var pre_secret = cst_encode_opt_box_autoadd_payment_secret(apiObj.secret);
      var pre_lsp_fee_limits =
          cst_encode_box_autoadd_lsp_fee_limits(apiObj.lspFeeLimits);
      wireObj.tag = 2;
      wireObj.kind.Bolt11Jit.hash = pre_hash;
      wireObj.kind.Bolt11Jit.preimage = pre_preimage;
      wireObj.kind.Bolt11Jit.secret = pre_secret;
      wireObj.kind.Bolt11Jit.lsp_fee_limits = pre_lsp_fee_limits;
      return;
    }
    if (apiObj is PaymentKind_Spontaneous) {
      var pre_hash = cst_encode_box_autoadd_payment_hash(apiObj.hash);
      var pre_preimage =
          cst_encode_opt_box_autoadd_payment_preimage(apiObj.preimage);
      wireObj.tag = 3;
      wireObj.kind.Spontaneous.hash = pre_hash;
      wireObj.kind.Spontaneous.preimage = pre_preimage;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_payment_preimage(
      PaymentPreimage apiObj, wire_cst_payment_preimage wireObj) {
    wireObj.data = cst_encode_u_8_array_32(apiObj.data);
  }

  @protected
  void cst_api_fill_to_wire_payment_secret(
      PaymentSecret apiObj, wire_cst_payment_secret wireObj) {
    wireObj.data = cst_encode_u_8_array_32(apiObj.data);
  }

  @protected
  void cst_api_fill_to_wire_peer_details(
      PeerDetails apiObj, wire_cst_peer_details wireObj) {
    cst_api_fill_to_wire_public_key(apiObj.nodeId, wireObj.node_id);
    cst_api_fill_to_wire_socket_address(apiObj.address, wireObj.address);
    wireObj.is_connected = cst_encode_bool(apiObj.isConnected);
  }

  @protected
  void cst_api_fill_to_wire_pending_sweep_balance(
      PendingSweepBalance apiObj, wire_cst_pending_sweep_balance wireObj) {
    if (apiObj is PendingSweepBalance_PendingBroadcast) {
      var pre_channel_id =
          cst_encode_opt_box_autoadd_channel_id(apiObj.channelId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      wireObj.tag = 0;
      wireObj.kind.PendingBroadcast.channel_id = pre_channel_id;
      wireObj.kind.PendingBroadcast.amount_satoshis = pre_amount_satoshis;
      return;
    }
    if (apiObj is PendingSweepBalance_BroadcastAwaitingConfirmation) {
      var pre_channel_id =
          cst_encode_opt_box_autoadd_channel_id(apiObj.channelId);
      var pre_latest_broadcast_height =
          cst_encode_u_32(apiObj.latestBroadcastHeight);
      var pre_latest_spending_txid =
          cst_encode_box_autoadd_txid(apiObj.latestSpendingTxid);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      wireObj.tag = 1;
      wireObj.kind.BroadcastAwaitingConfirmation.channel_id = pre_channel_id;
      wireObj.kind.BroadcastAwaitingConfirmation.latest_broadcast_height =
          pre_latest_broadcast_height;
      wireObj.kind.BroadcastAwaitingConfirmation.latest_spending_txid =
          pre_latest_spending_txid;
      wireObj.kind.BroadcastAwaitingConfirmation.amount_satoshis =
          pre_amount_satoshis;
      return;
    }
    if (apiObj is PendingSweepBalance_AwaitingThresholdConfirmations) {
      var pre_channel_id =
          cst_encode_opt_box_autoadd_channel_id(apiObj.channelId);
      var pre_latest_spending_txid =
          cst_encode_box_autoadd_txid(apiObj.latestSpendingTxid);
      var pre_confirmation_hash = cst_encode_String(apiObj.confirmationHash);
      var pre_confirmation_height = cst_encode_u_32(apiObj.confirmationHeight);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      wireObj.tag = 2;
      wireObj.kind.AwaitingThresholdConfirmations.channel_id = pre_channel_id;
      wireObj.kind.AwaitingThresholdConfirmations.latest_spending_txid =
          pre_latest_spending_txid;
      wireObj.kind.AwaitingThresholdConfirmations.confirmation_hash =
          pre_confirmation_hash;
      wireObj.kind.AwaitingThresholdConfirmations.confirmation_height =
          pre_confirmation_height;
      wireObj.kind.AwaitingThresholdConfirmations.amount_satoshis =
          pre_amount_satoshis;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_public_key(
      PublicKey apiObj, wire_cst_public_key wireObj) {
    wireObj.hex = cst_encode_String(apiObj.hex);
  }

  @protected
  void cst_api_fill_to_wire_record_socket_address_public_key_opt_string(
      (SocketAddress, PublicKey, String?) apiObj,
      wire_cst_record_socket_address_public_key_opt_string wireObj) {
    cst_api_fill_to_wire_socket_address(apiObj.$1, wireObj.field0);
    cst_api_fill_to_wire_public_key(apiObj.$2, wireObj.field1);
    wireObj.field2 = cst_encode_opt_String(apiObj.$3);
  }

  @protected
  void cst_api_fill_to_wire_socket_address(
      SocketAddress apiObj, wire_cst_socket_address wireObj) {
    if (apiObj is SocketAddress_TcpIpV4) {
      var pre_addr = cst_encode_u_8_array_4(apiObj.addr);
      var pre_port = cst_encode_u_16(apiObj.port);
      wireObj.tag = 0;
      wireObj.kind.TcpIpV4.addr = pre_addr;
      wireObj.kind.TcpIpV4.port = pre_port;
      return;
    }
    if (apiObj is SocketAddress_TcpIpV6) {
      var pre_addr = cst_encode_u_8_array_16(apiObj.addr);
      var pre_port = cst_encode_u_16(apiObj.port);
      wireObj.tag = 1;
      wireObj.kind.TcpIpV6.addr = pre_addr;
      wireObj.kind.TcpIpV6.port = pre_port;
      return;
    }
    if (apiObj is SocketAddress_OnionV2) {
      var pre_field0 = cst_encode_u_8_array_12(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.OnionV2.field0 = pre_field0;
      return;
    }
    if (apiObj is SocketAddress_OnionV3) {
      var pre_ed25519_pubkey = cst_encode_u_8_array_32(apiObj.ed25519Pubkey);
      var pre_checksum = cst_encode_u_16(apiObj.checksum);
      var pre_version = cst_encode_u_8(apiObj.version);
      var pre_port = cst_encode_u_16(apiObj.port);
      wireObj.tag = 3;
      wireObj.kind.OnionV3.ed25519_pubkey = pre_ed25519_pubkey;
      wireObj.kind.OnionV3.checksum = pre_checksum;
      wireObj.kind.OnionV3.version = pre_version;
      wireObj.kind.OnionV3.port = pre_port;
      return;
    }
    if (apiObj is SocketAddress_Hostname) {
      var pre_addr = cst_encode_String(apiObj.addr);
      var pre_port = cst_encode_u_16(apiObj.port);
      wireObj.tag = 4;
      wireObj.kind.Hostname.addr = pre_addr;
      wireObj.kind.Hostname.port = pre_port;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_txid(Txid apiObj, wire_cst_txid wireObj) {
    wireObj.hash = cst_encode_String(apiObj.hash);
  }

  @protected
  void cst_api_fill_to_wire_user_channel_id(
      UserChannelId apiObj, wire_cst_user_channel_id wireObj) {
    wireObj.data = cst_encode_list_prim_u_8_strict(apiObj.data);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
      NodeBuilder raw);

  @protected
  int cst_encode_RustOpaque_Node(Node raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
      NodeBuilder raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodepaymentBolt11Payment(
      LdkNodePaymentBolt11Payment raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodepaymentOnchainPayment(
      LdkNodePaymentOnchainPayment raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodepaymentSpontaneousPayment(
      LdkNodePaymentSpontaneousPayment raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_builder_exception(BuilderException raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_log_level(LogLevel raw);

  @protected
  int cst_encode_network(Network raw);

  @protected
  int cst_encode_node_exception(NodeException raw);

  @protected
  int cst_encode_payment_direction(PaymentDirection raw);

  @protected
  int cst_encode_payment_failure_reason(PaymentFailureReason raw);

  @protected
  int cst_encode_payment_status(PaymentStatus raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
          NodeBuilder self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_Node(Node self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
          NodeBuilder self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodepaymentBolt11Payment(
      LdkNodePaymentBolt11Payment self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodepaymentOnchainPayment(
      LdkNodePaymentOnchainPayment self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodepaymentSpontaneousPayment(
      LdkNodePaymentSpontaneousPayment self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_address(Address self, SseSerializer serializer);

  @protected
  void sse_encode_balance_details(
      BalanceDetails self, SseSerializer serializer);

  @protected
  void sse_encode_best_block(BestBlock self, SseSerializer serializer);

  @protected
  void sse_encode_bolt_11_invoice(Bolt11Invoice self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address(Address self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bolt_11_invoice(
      Bolt11Invoice self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_channel_config(
      ChannelConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_channel_id(
      ChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_closure_reason(
      ClosureReason self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_config(Config self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_entropy_source_config(
      EntropySourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_event(Event self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_gossip_source_config(
      GossipSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ldk_bolt_11_payment(
      LdkBolt11Payment self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ldk_mnemonic(
      LdkMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ldk_node(LdkNode self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ldk_on_chain_payment(
      LdkOnChainPayment self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ldk_spontaneous_payment(
      LdkSpontaneousPayment self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_liquidity_source_config(
      LiquiditySourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_lsp_fee_limits(
      LSPFeeLimits self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_max_dust_htlc_exposure(
      MaxDustHTLCExposure self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_out_point(
      OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_details(
      PaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_failure_reason(
      PaymentFailureReason self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_hash(
      PaymentHash self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_id(
      PaymentId self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_preimage(
      PaymentPreimage self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_secret(
      PaymentSecret self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_public_key(
      PublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_socket_address(
      SocketAddress self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_txid(Txid self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_user_channel_id(
      UserChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_builder_exception(
      BuilderException self, SseSerializer serializer);

  @protected
  void sse_encode_chain_data_source_config(
      ChainDataSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_channel_config(ChannelConfig self, SseSerializer serializer);

  @protected
  void sse_encode_channel_details(
      ChannelDetails self, SseSerializer serializer);

  @protected
  void sse_encode_channel_id(ChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_closure_reason(ClosureReason self, SseSerializer serializer);

  @protected
  void sse_encode_config(Config self, SseSerializer serializer);

  @protected
  void sse_encode_entropy_source_config(
      EntropySourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_event(Event self, SseSerializer serializer);

  @protected
  void sse_encode_gossip_source_config(
      GossipSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_ldk_bolt_11_payment(
      LdkBolt11Payment self, SseSerializer serializer);

  @protected
  void sse_encode_ldk_mnemonic(LdkMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_ldk_node(LdkNode self, SseSerializer serializer);

  @protected
  void sse_encode_ldk_on_chain_payment(
      LdkOnChainPayment self, SseSerializer serializer);

  @protected
  void sse_encode_ldk_spontaneous_payment(
      LdkSpontaneousPayment self, SseSerializer serializer);

  @protected
  void sse_encode_lightning_balance(
      LightningBalance self, SseSerializer serializer);

  @protected
  void sse_encode_liquidity_source_config(
      LiquiditySourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_list_channel_details(
      List<ChannelDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_lightning_balance(
      List<LightningBalance> self, SseSerializer serializer);

  @protected
  void sse_encode_list_payment_details(
      List<PaymentDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_peer_details(
      List<PeerDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_pending_sweep_balance(
      List<PendingSweepBalance> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_public_key(
      List<PublicKey> self, SseSerializer serializer);

  @protected
  void sse_encode_list_socket_address(
      List<SocketAddress> self, SseSerializer serializer);

  @protected
  void sse_encode_log_level(LogLevel self, SseSerializer serializer);

  @protected
  void sse_encode_lsp_fee_limits(LSPFeeLimits self, SseSerializer serializer);

  @protected
  void sse_encode_max_dust_htlc_exposure(
      MaxDustHTLCExposure self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_node_exception(NodeException self, SseSerializer serializer);

  @protected
  void sse_encode_node_status(NodeStatus self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_channel_config(
      ChannelConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_channel_id(
      ChannelId? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_closure_reason(
      ClosureReason? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_entropy_source_config(
      EntropySourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_event(Event? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_gossip_source_config(
      GossipSourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_liquidity_source_config(
      LiquiditySourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_max_dust_htlc_exposure(
      MaxDustHTLCExposure? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_out_point(
      OutPoint? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_details(
      PaymentDetails? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_failure_reason(
      PaymentFailureReason? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_id(
      PaymentId? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_preimage(
      PaymentPreimage? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_secret(
      PaymentSecret? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_public_key(
      PublicKey? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_socket_address(
      List<SocketAddress>? self, SseSerializer serializer);

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_payment_details(
      PaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_payment_direction(
      PaymentDirection self, SseSerializer serializer);

  @protected
  void sse_encode_payment_failure_reason(
      PaymentFailureReason self, SseSerializer serializer);

  @protected
  void sse_encode_payment_hash(PaymentHash self, SseSerializer serializer);

  @protected
  void sse_encode_payment_id(PaymentId self, SseSerializer serializer);

  @protected
  void sse_encode_payment_kind(PaymentKind self, SseSerializer serializer);

  @protected
  void sse_encode_payment_preimage(
      PaymentPreimage self, SseSerializer serializer);

  @protected
  void sse_encode_payment_secret(PaymentSecret self, SseSerializer serializer);

  @protected
  void sse_encode_payment_status(PaymentStatus self, SseSerializer serializer);

  @protected
  void sse_encode_peer_details(PeerDetails self, SseSerializer serializer);

  @protected
  void sse_encode_pending_sweep_balance(
      PendingSweepBalance self, SseSerializer serializer);

  @protected
  void sse_encode_public_key(PublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_record_socket_address_public_key_opt_string(
      (SocketAddress, PublicKey, String?) self, SseSerializer serializer);

  @protected
  void sse_encode_socket_address(SocketAddress self, SseSerializer serializer);

  @protected
  void sse_encode_txid(Txid self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_12(U8Array12 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_16(U8Array16 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_4(U8Array4 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_64(U8Array64 self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_user_channel_id(UserChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class LdkCoreWire implements BaseWire {
  factory LdkCoreWire.fromExternalLibrary(ExternalLibrary lib) =>
      LdkCoreWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LdkCoreWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LdkCoreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_NodeBuilder_build(
    int port_,
    int that,
  ) {
    return _wire_NodeBuilder_build(
      port_,
      that,
    );
  }

  late final _wire_NodeBuilder_buildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
          'frbgen_ldk_node_wire_NodeBuilder_build');
  late final _wire_NodeBuilder_build =
      _wire_NodeBuilder_buildPtr.asFunction<void Function(int, int)>();

  void wire_NodeBuilder_build_with_fs_store(
    int port_,
    int that,
  ) {
    return _wire_NodeBuilder_build_with_fs_store(
      port_,
      that,
    );
  }

  late final _wire_NodeBuilder_build_with_fs_storePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
          'frbgen_ldk_node_wire_NodeBuilder_build_with_fs_store');
  late final _wire_NodeBuilder_build_with_fs_store =
      _wire_NodeBuilder_build_with_fs_storePtr
          .asFunction<void Function(int, int)>();

  void wire_NodeBuilder_create_builder(
    int port_,
    ffi.Pointer<wire_cst_config> config,
    ffi.Pointer<wire_cst_chain_data_source_config> chain_data_source_config,
    ffi.Pointer<wire_cst_entropy_source_config> entropy_source_config,
    ffi.Pointer<wire_cst_gossip_source_config> gossip_source_config,
    ffi.Pointer<wire_cst_liquidity_source_config> liquidity_source_config,
  ) {
    return _wire_NodeBuilder_create_builder(
      port_,
      config,
      chain_data_source_config,
      entropy_source_config,
      gossip_source_config,
      liquidity_source_config,
    );
  }

  late final _wire_NodeBuilder_create_builderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_config>,
                  ffi.Pointer<wire_cst_chain_data_source_config>,
                  ffi.Pointer<wire_cst_entropy_source_config>,
                  ffi.Pointer<wire_cst_gossip_source_config>,
                  ffi.Pointer<wire_cst_liquidity_source_config>)>>(
      'frbgen_ldk_node_wire_NodeBuilder_create_builder');
  late final _wire_NodeBuilder_create_builder =
      _wire_NodeBuilder_create_builderPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_config>,
              ffi.Pointer<wire_cst_chain_data_source_config>,
              ffi.Pointer<wire_cst_entropy_source_config>,
              ffi.Pointer<wire_cst_gossip_source_config>,
              ffi.Pointer<wire_cst_liquidity_source_config>)>();

  void wire_ldk_bolt_11_payment_receive(
    int port_,
    ffi.Pointer<wire_cst_ldk_bolt_11_payment> that,
    int amount_msat,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    int expiry_secs,
  ) {
    return _wire_ldk_bolt_11_payment_receive(
      port_,
      that,
      amount_msat,
      description,
      expiry_secs,
    );
  }

  late final _wire_ldk_bolt_11_payment_receivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
              ffi.Uint64,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Uint32)>>('frbgen_ldk_node_wire_ldk_bolt_11_payment_receive');
  late final _wire_ldk_bolt_11_payment_receive =
      _wire_ldk_bolt_11_payment_receivePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_bolt_11_payment>, int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire_ldk_bolt_11_payment_receive_variable_amount(
    int port_,
    ffi.Pointer<wire_cst_ldk_bolt_11_payment> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    int expiry_secs,
  ) {
    return _wire_ldk_bolt_11_payment_receive_variable_amount(
      port_,
      that,
      description,
      expiry_secs,
    );
  }

  late final _wire_ldk_bolt_11_payment_receive_variable_amountPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint32)>>(
      'frbgen_ldk_node_wire_ldk_bolt_11_payment_receive_variable_amount');
  late final _wire_ldk_bolt_11_payment_receive_variable_amount =
      _wire_ldk_bolt_11_payment_receive_variable_amountPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire_ldk_bolt_11_payment_receive_variable_amount_via_jit_channel(
    int port_,
    ffi.Pointer<wire_cst_ldk_bolt_11_payment> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    int expiry_secs,
    ffi.Pointer<ffi.Uint64> max_proportional_lsp_fee_limit_ppm_msat,
  ) {
    return _wire_ldk_bolt_11_payment_receive_variable_amount_via_jit_channel(
      port_,
      that,
      description,
      expiry_secs,
      max_proportional_lsp_fee_limit_ppm_msat,
    );
  }

  late final _wire_ldk_bolt_11_payment_receive_variable_amount_via_jit_channelPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Uint32,
                      ffi.Pointer<ffi.Uint64>)>>(
          'frbgen_ldk_node_wire_ldk_bolt_11_payment_receive_variable_amount_via_jit_channel');
  late final _wire_ldk_bolt_11_payment_receive_variable_amount_via_jit_channel =
      _wire_ldk_bolt_11_payment_receive_variable_amount_via_jit_channelPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  ffi.Pointer<ffi.Uint64>)>();

  void wire_ldk_bolt_11_payment_receive_via_jit_channel(
    int port_,
    ffi.Pointer<wire_cst_ldk_bolt_11_payment> that,
    int amount_msat,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    int expiry_secs,
    ffi.Pointer<ffi.Uint64> max_total_lsp_fee_limit_msat,
  ) {
    return _wire_ldk_bolt_11_payment_receive_via_jit_channel(
      port_,
      that,
      amount_msat,
      description,
      expiry_secs,
      max_total_lsp_fee_limit_msat,
    );
  }

  late final _wire_ldk_bolt_11_payment_receive_via_jit_channelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint32,
                  ffi.Pointer<ffi.Uint64>)>>(
      'frbgen_ldk_node_wire_ldk_bolt_11_payment_receive_via_jit_channel');
  late final _wire_ldk_bolt_11_payment_receive_via_jit_channel =
      _wire_ldk_bolt_11_payment_receive_via_jit_channelPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<ffi.Uint64>)>();

  void wire_ldk_bolt_11_payment_send(
    int port_,
    ffi.Pointer<wire_cst_ldk_bolt_11_payment> that,
    ffi.Pointer<wire_cst_bolt_11_invoice> invoice,
  ) {
    return _wire_ldk_bolt_11_payment_send(
      port_,
      that,
      invoice,
    );
  }

  late final _wire_ldk_bolt_11_payment_sendPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
                  ffi.Pointer<wire_cst_bolt_11_invoice>)>>(
      'frbgen_ldk_node_wire_ldk_bolt_11_payment_send');
  late final _wire_ldk_bolt_11_payment_send =
      _wire_ldk_bolt_11_payment_sendPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
              ffi.Pointer<wire_cst_bolt_11_invoice>)>();

  void wire_ldk_bolt_11_payment_send_probes(
    int port_,
    ffi.Pointer<wire_cst_ldk_bolt_11_payment> that,
    ffi.Pointer<wire_cst_bolt_11_invoice> invoice,
  ) {
    return _wire_ldk_bolt_11_payment_send_probes(
      port_,
      that,
      invoice,
    );
  }

  late final _wire_ldk_bolt_11_payment_send_probesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
                  ffi.Pointer<wire_cst_bolt_11_invoice>)>>(
      'frbgen_ldk_node_wire_ldk_bolt_11_payment_send_probes');
  late final _wire_ldk_bolt_11_payment_send_probes =
      _wire_ldk_bolt_11_payment_send_probesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
              ffi.Pointer<wire_cst_bolt_11_invoice>)>();

  void wire_ldk_bolt_11_payment_send_probes_using_amount(
    int port_,
    ffi.Pointer<wire_cst_ldk_bolt_11_payment> that,
    ffi.Pointer<wire_cst_bolt_11_invoice> invoice,
    int amount_msat,
  ) {
    return _wire_ldk_bolt_11_payment_send_probes_using_amount(
      port_,
      that,
      invoice,
      amount_msat,
    );
  }

  late final _wire_ldk_bolt_11_payment_send_probes_using_amountPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
                  ffi.Pointer<wire_cst_bolt_11_invoice>,
                  ffi.Uint64)>>(
      'frbgen_ldk_node_wire_ldk_bolt_11_payment_send_probes_using_amount');
  late final _wire_ldk_bolt_11_payment_send_probes_using_amount =
      _wire_ldk_bolt_11_payment_send_probes_using_amountPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
              ffi.Pointer<wire_cst_bolt_11_invoice>, int)>();

  void wire_ldk_bolt_11_payment_send_using_amount(
    int port_,
    ffi.Pointer<wire_cst_ldk_bolt_11_payment> that,
    ffi.Pointer<wire_cst_bolt_11_invoice> invoice,
    int amount_msat,
  ) {
    return _wire_ldk_bolt_11_payment_send_using_amount(
      port_,
      that,
      invoice,
      amount_msat,
    );
  }

  late final _wire_ldk_bolt_11_payment_send_using_amountPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
                  ffi.Pointer<wire_cst_bolt_11_invoice>,
                  ffi.Uint64)>>(
      'frbgen_ldk_node_wire_ldk_bolt_11_payment_send_using_amount');
  late final _wire_ldk_bolt_11_payment_send_using_amount =
      _wire_ldk_bolt_11_payment_send_using_amountPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_bolt_11_payment>,
              ffi.Pointer<wire_cst_bolt_11_invoice>, int)>();

  void wire_ldk_mnemonic_generate(
    int port_,
  ) {
    return _wire_ldk_mnemonic_generate(
      port_,
    );
  }

  late final _wire_ldk_mnemonic_generatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_ldk_node_wire_ldk_mnemonic_generate');
  late final _wire_ldk_mnemonic_generate =
      _wire_ldk_mnemonic_generatePtr.asFunction<void Function(int)>();

  void wire_ldk_node_bolt11_payment(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> ptr,
  ) {
    return _wire_ldk_node_bolt11_payment(
      port_,
      ptr,
    );
  }

  late final _wire_ldk_node_bolt11_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_bolt11_payment');
  late final _wire_ldk_node_bolt11_payment = _wire_ldk_node_bolt11_paymentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_close_channel(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
    ffi.Pointer<wire_cst_user_channel_id> user_channel_id,
    ffi.Pointer<wire_cst_public_key> counterparty_node_id,
  ) {
    return _wire_ldk_node_close_channel(
      port_,
      that,
      user_channel_id,
      counterparty_node_id,
    );
  }

  late final _wire_ldk_node_close_channelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_node>,
                  ffi.Pointer<wire_cst_user_channel_id>,
                  ffi.Pointer<wire_cst_public_key>)>>(
      'frbgen_ldk_node_wire_ldk_node_close_channel');
  late final _wire_ldk_node_close_channel =
      _wire_ldk_node_close_channelPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ldk_node>,
              ffi.Pointer<wire_cst_user_channel_id>,
              ffi.Pointer<wire_cst_public_key>)>();

  void wire_ldk_node_config(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_config(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_config');
  late final _wire_ldk_node_config = _wire_ldk_node_configPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_connect(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
    ffi.Pointer<wire_cst_public_key> node_id,
    ffi.Pointer<wire_cst_socket_address> address,
    bool persist,
  ) {
    return _wire_ldk_node_connect(
      port_,
      that,
      node_id,
      address,
      persist,
    );
  }

  late final _wire_ldk_node_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_ldk_node>,
              ffi.Pointer<wire_cst_public_key>,
              ffi.Pointer<wire_cst_socket_address>,
              ffi.Bool)>>('frbgen_ldk_node_wire_ldk_node_connect');
  late final _wire_ldk_node_connect = _wire_ldk_node_connectPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_cst_ldk_node>,
          ffi.Pointer<wire_cst_public_key>,
          ffi.Pointer<wire_cst_socket_address>,
          bool)>();

  void wire_ldk_node_connect_open_channel(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
    ffi.Pointer<wire_cst_socket_address> socket_address,
    ffi.Pointer<wire_cst_public_key> node_id,
    int channel_amount_sats,
    ffi.Pointer<ffi.Uint64> push_to_counterparty_msat,
    bool announce_channel,
    ffi.Pointer<wire_cst_channel_config> channel_config,
  ) {
    return _wire_ldk_node_connect_open_channel(
      port_,
      that,
      socket_address,
      node_id,
      channel_amount_sats,
      push_to_counterparty_msat,
      announce_channel,
      channel_config,
    );
  }

  late final _wire_ldk_node_connect_open_channelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_node>,
                  ffi.Pointer<wire_cst_socket_address>,
                  ffi.Pointer<wire_cst_public_key>,
                  ffi.Uint64,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Bool,
                  ffi.Pointer<wire_cst_channel_config>)>>(
      'frbgen_ldk_node_wire_ldk_node_connect_open_channel');
  late final _wire_ldk_node_connect_open_channel =
      _wire_ldk_node_connect_open_channelPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ldk_node>,
              ffi.Pointer<wire_cst_socket_address>,
              ffi.Pointer<wire_cst_public_key>,
              int,
              ffi.Pointer<ffi.Uint64>,
              bool,
              ffi.Pointer<wire_cst_channel_config>)>();

  void wire_ldk_node_disconnect(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
    ffi.Pointer<wire_cst_public_key> counterparty_node_id,
  ) {
    return _wire_ldk_node_disconnect(
      port_,
      that,
      counterparty_node_id,
    );
  }

  late final _wire_ldk_node_disconnectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>,
                  ffi.Pointer<wire_cst_public_key>)>>(
      'frbgen_ldk_node_wire_ldk_node_disconnect');
  late final _wire_ldk_node_disconnect =
      _wire_ldk_node_disconnectPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_node>,
              ffi.Pointer<wire_cst_public_key>)>();

  void wire_ldk_node_event_handled(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_event_handled(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_event_handledPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_event_handled');
  late final _wire_ldk_node_event_handled = _wire_ldk_node_event_handledPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_list_balances(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_list_balances(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_list_balancesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_list_balances');
  late final _wire_ldk_node_list_balances = _wire_ldk_node_list_balancesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_list_channels(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_list_channels(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_list_channelsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_list_channels');
  late final _wire_ldk_node_list_channels = _wire_ldk_node_list_channelsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_list_payments(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_list_payments(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_list_paymentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_list_payments');
  late final _wire_ldk_node_list_payments = _wire_ldk_node_list_paymentsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_list_payments_with_filter(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
    int payment_direction,
  ) {
    return _wire_ldk_node_list_payments_with_filter(
      port_,
      that,
      payment_direction,
    );
  }

  late final _wire_ldk_node_list_payments_with_filterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_ldk_node>, ffi.Int32)>>(
      'frbgen_ldk_node_wire_ldk_node_list_payments_with_filter');
  late final _wire_ldk_node_list_payments_with_filter =
      _wire_ldk_node_list_payments_with_filterPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_node>, int)>();

  void wire_ldk_node_list_peers(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_list_peers(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_list_peersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_list_peers');
  late final _wire_ldk_node_list_peers = _wire_ldk_node_list_peersPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_listening_addresses(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_listening_addresses(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_listening_addressesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_listening_addresses');
  late final _wire_ldk_node_listening_addresses =
      _wire_ldk_node_listening_addressesPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_next_event(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_next_event(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_next_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_next_event');
  late final _wire_ldk_node_next_event = _wire_ldk_node_next_eventPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_next_event_async(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_next_event_async(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_next_event_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_next_event_async');
  late final _wire_ldk_node_next_event_async =
      _wire_ldk_node_next_event_asyncPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_node_id(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_node_id(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_node_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_node_id');
  late final _wire_ldk_node_node_id = _wire_ldk_node_node_idPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_on_chain_payment(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> ptr,
  ) {
    return _wire_ldk_node_on_chain_payment(
      port_,
      ptr,
    );
  }

  late final _wire_ldk_node_on_chain_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_on_chain_payment');
  late final _wire_ldk_node_on_chain_payment =
      _wire_ldk_node_on_chain_paymentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_payment(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
    ffi.Pointer<wire_cst_payment_id> payment_id,
  ) {
    return _wire_ldk_node_payment(
      port_,
      that,
      payment_id,
    );
  }

  late final _wire_ldk_node_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>,
                  ffi.Pointer<wire_cst_payment_id>)>>(
      'frbgen_ldk_node_wire_ldk_node_payment');
  late final _wire_ldk_node_payment = _wire_ldk_node_paymentPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_ldk_node>,
          ffi.Pointer<wire_cst_payment_id>)>();

  void wire_ldk_node_remove_payment(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
    ffi.Pointer<wire_cst_payment_id> payment_id,
  ) {
    return _wire_ldk_node_remove_payment(
      port_,
      that,
      payment_id,
    );
  }

  late final _wire_ldk_node_remove_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>,
                  ffi.Pointer<wire_cst_payment_id>)>>(
      'frbgen_ldk_node_wire_ldk_node_remove_payment');
  late final _wire_ldk_node_remove_payment =
      _wire_ldk_node_remove_paymentPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_node>,
              ffi.Pointer<wire_cst_payment_id>)>();

  void wire_ldk_node_sign_message(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> msg,
  ) {
    return _wire_ldk_node_sign_message(
      port_,
      that,
      msg,
    );
  }

  late final _wire_ldk_node_sign_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>,
                  ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_ldk_node_wire_ldk_node_sign_message');
  late final _wire_ldk_node_sign_message =
      _wire_ldk_node_sign_messagePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_node>,
              ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire_ldk_node_spontaneous_payment(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> ptr,
  ) {
    return _wire_ldk_node_spontaneous_payment(
      port_,
      ptr,
    );
  }

  late final _wire_ldk_node_spontaneous_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_spontaneous_payment');
  late final _wire_ldk_node_spontaneous_payment =
      _wire_ldk_node_spontaneous_paymentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_start(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_start(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_start');
  late final _wire_ldk_node_start = _wire_ldk_node_startPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_status(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_status(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_statusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_status');
  late final _wire_ldk_node_status = _wire_ldk_node_statusPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_stop(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_stop(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_stopPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_stop');
  late final _wire_ldk_node_stop = _wire_ldk_node_stopPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_sync_wallets(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_sync_wallets(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_sync_walletsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_sync_wallets');
  late final _wire_ldk_node_sync_wallets = _wire_ldk_node_sync_walletsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_node_update_channel_config(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
    ffi.Pointer<wire_cst_user_channel_id> user_channel_id,
    ffi.Pointer<wire_cst_public_key> counterparty_node_id,
    ffi.Pointer<wire_cst_channel_config> channel_config,
  ) {
    return _wire_ldk_node_update_channel_config(
      port_,
      that,
      user_channel_id,
      counterparty_node_id,
      channel_config,
    );
  }

  late final _wire_ldk_node_update_channel_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_node>,
                  ffi.Pointer<wire_cst_user_channel_id>,
                  ffi.Pointer<wire_cst_public_key>,
                  ffi.Pointer<wire_cst_channel_config>)>>(
      'frbgen_ldk_node_wire_ldk_node_update_channel_config');
  late final _wire_ldk_node_update_channel_config =
      _wire_ldk_node_update_channel_configPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ldk_node>,
              ffi.Pointer<wire_cst_user_channel_id>,
              ffi.Pointer<wire_cst_public_key>,
              ffi.Pointer<wire_cst_channel_config>)>();

  void wire_ldk_node_verify_signature(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> msg,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sig,
    ffi.Pointer<wire_cst_public_key> public_key,
  ) {
    return _wire_ldk_node_verify_signature(
      port_,
      that,
      msg,
      sig,
      public_key,
    );
  }

  late final _wire_ldk_node_verify_signaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_node>,
                  ffi.Pointer<wire_cst_list_prim_u_8_loose>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_public_key>)>>(
      'frbgen_ldk_node_wire_ldk_node_verify_signature');
  late final _wire_ldk_node_verify_signature =
      _wire_ldk_node_verify_signaturePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ldk_node>,
              ffi.Pointer<wire_cst_list_prim_u_8_loose>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_public_key>)>();

  void wire_ldk_node_wait_next_event(
    int port_,
    ffi.Pointer<wire_cst_ldk_node> that,
  ) {
    return _wire_ldk_node_wait_next_event(
      port_,
      that,
    );
  }

  late final _wire_ldk_node_wait_next_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ldk_node>)>>(
      'frbgen_ldk_node_wire_ldk_node_wait_next_event');
  late final _wire_ldk_node_wait_next_event = _wire_ldk_node_wait_next_eventPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ldk_node>)>();

  void wire_ldk_on_chain_payment_new_address(
    int port_,
    ffi.Pointer<wire_cst_ldk_on_chain_payment> that,
  ) {
    return _wire_ldk_on_chain_payment_new_address(
      port_,
      that,
    );
  }

  late final _wire_ldk_on_chain_payment_new_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_ldk_on_chain_payment>)>>(
      'frbgen_ldk_node_wire_ldk_on_chain_payment_new_address');
  late final _wire_ldk_on_chain_payment_new_address =
      _wire_ldk_on_chain_payment_new_addressPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_on_chain_payment>)>();

  void wire_ldk_on_chain_payment_send_all_to_address(
    int port_,
    ffi.Pointer<wire_cst_ldk_on_chain_payment> that,
    ffi.Pointer<wire_cst_address> address,
  ) {
    return _wire_ldk_on_chain_payment_send_all_to_address(
      port_,
      that,
      address,
    );
  }

  late final _wire_ldk_on_chain_payment_send_all_to_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_on_chain_payment>,
                  ffi.Pointer<wire_cst_address>)>>(
      'frbgen_ldk_node_wire_ldk_on_chain_payment_send_all_to_address');
  late final _wire_ldk_on_chain_payment_send_all_to_address =
      _wire_ldk_on_chain_payment_send_all_to_addressPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_on_chain_payment>,
              ffi.Pointer<wire_cst_address>)>();

  void wire_ldk_on_chain_payment_send_to_address(
    int port_,
    ffi.Pointer<wire_cst_ldk_on_chain_payment> that,
    ffi.Pointer<wire_cst_address> address,
    int amount_sats,
  ) {
    return _wire_ldk_on_chain_payment_send_to_address(
      port_,
      that,
      address,
      amount_sats,
    );
  }

  late final _wire_ldk_on_chain_payment_send_to_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_on_chain_payment>,
                  ffi.Pointer<wire_cst_address>,
                  ffi.Uint64)>>(
      'frbgen_ldk_node_wire_ldk_on_chain_payment_send_to_address');
  late final _wire_ldk_on_chain_payment_send_to_address =
      _wire_ldk_on_chain_payment_send_to_addressPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_on_chain_payment>,
              ffi.Pointer<wire_cst_address>, int)>();

  void wire_ldk_spontaneous_payment_send(
    int port_,
    ffi.Pointer<wire_cst_ldk_spontaneous_payment> that,
    int amount_msat,
    ffi.Pointer<wire_cst_public_key> node_id,
  ) {
    return _wire_ldk_spontaneous_payment_send(
      port_,
      that,
      amount_msat,
      node_id,
    );
  }

  late final _wire_ldk_spontaneous_payment_sendPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_spontaneous_payment>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_public_key>)>>(
      'frbgen_ldk_node_wire_ldk_spontaneous_payment_send');
  late final _wire_ldk_spontaneous_payment_send =
      _wire_ldk_spontaneous_payment_sendPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_spontaneous_payment>, int,
              ffi.Pointer<wire_cst_public_key>)>();

  void wire_ldk_spontaneous_payment_send_probes(
    int port_,
    ffi.Pointer<wire_cst_ldk_spontaneous_payment> that,
    int amount_msat,
    ffi.Pointer<wire_cst_public_key> node_id,
  ) {
    return _wire_ldk_spontaneous_payment_send_probes(
      port_,
      that,
      amount_msat,
      node_id,
    );
  }

  late final _wire_ldk_spontaneous_payment_send_probesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ldk_spontaneous_payment>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_public_key>)>>(
      'frbgen_ldk_node_wire_ldk_spontaneous_payment_send_probes');
  late final _wire_ldk_spontaneous_payment_send_probes =
      _wire_ldk_spontaneous_payment_send_probesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ldk_spontaneous_payment>, int,
              ffi.Pointer<wire_cst_public_key>)>();

  void rust_arc_increment_strong_count_RustOpaque_Node(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_Node(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_NodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_Node');
  late final _rust_arc_increment_strong_count_RustOpaque_Node =
      _rust_arc_increment_strong_count_RustOpaque_NodePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_Node(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_Node(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_NodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_Node');
  late final _rust_arc_decrement_strong_count_RustOpaque_Node =
      _rust_arc_decrement_strong_count_RustOpaque_NodePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilderPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilder =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNodeBuilderPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11PaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11PaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11PaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11PaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<wire_cst_address> cst_new_box_autoadd_address() {
    return _cst_new_box_autoadd_address();
  }

  late final _cst_new_box_autoadd_addressPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_address> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_address');
  late final _cst_new_box_autoadd_address = _cst_new_box_autoadd_addressPtr
      .asFunction<ffi.Pointer<wire_cst_address> Function()>();

  ffi.Pointer<wire_cst_bolt_11_invoice> cst_new_box_autoadd_bolt_11_invoice() {
    return _cst_new_box_autoadd_bolt_11_invoice();
  }

  late final _cst_new_box_autoadd_bolt_11_invoicePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_bolt_11_invoice> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_bolt_11_invoice');
  late final _cst_new_box_autoadd_bolt_11_invoice =
      _cst_new_box_autoadd_bolt_11_invoicePtr
          .asFunction<ffi.Pointer<wire_cst_bolt_11_invoice> Function()>();

  ffi.Pointer<wire_cst_chain_data_source_config>
      cst_new_box_autoadd_chain_data_source_config() {
    return _cst_new_box_autoadd_chain_data_source_config();
  }

  late final _cst_new_box_autoadd_chain_data_source_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_chain_data_source_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_chain_data_source_config');
  late final _cst_new_box_autoadd_chain_data_source_config =
      _cst_new_box_autoadd_chain_data_source_configPtr.asFunction<
          ffi.Pointer<wire_cst_chain_data_source_config> Function()>();

  ffi.Pointer<wire_cst_channel_config> cst_new_box_autoadd_channel_config() {
    return _cst_new_box_autoadd_channel_config();
  }

  late final _cst_new_box_autoadd_channel_configPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_channel_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_channel_config');
  late final _cst_new_box_autoadd_channel_config =
      _cst_new_box_autoadd_channel_configPtr
          .asFunction<ffi.Pointer<wire_cst_channel_config> Function()>();

  ffi.Pointer<wire_cst_channel_id> cst_new_box_autoadd_channel_id() {
    return _cst_new_box_autoadd_channel_id();
  }

  late final _cst_new_box_autoadd_channel_idPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_channel_id> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_channel_id');
  late final _cst_new_box_autoadd_channel_id =
      _cst_new_box_autoadd_channel_idPtr
          .asFunction<ffi.Pointer<wire_cst_channel_id> Function()>();

  ffi.Pointer<wire_cst_closure_reason> cst_new_box_autoadd_closure_reason() {
    return _cst_new_box_autoadd_closure_reason();
  }

  late final _cst_new_box_autoadd_closure_reasonPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_closure_reason> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_closure_reason');
  late final _cst_new_box_autoadd_closure_reason =
      _cst_new_box_autoadd_closure_reasonPtr
          .asFunction<ffi.Pointer<wire_cst_closure_reason> Function()>();

  ffi.Pointer<wire_cst_config> cst_new_box_autoadd_config() {
    return _cst_new_box_autoadd_config();
  }

  late final _cst_new_box_autoadd_configPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_config> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_config');
  late final _cst_new_box_autoadd_config = _cst_new_box_autoadd_configPtr
      .asFunction<ffi.Pointer<wire_cst_config> Function()>();

  ffi.Pointer<wire_cst_entropy_source_config>
      cst_new_box_autoadd_entropy_source_config() {
    return _cst_new_box_autoadd_entropy_source_config();
  }

  late final _cst_new_box_autoadd_entropy_source_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_entropy_source_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_entropy_source_config');
  late final _cst_new_box_autoadd_entropy_source_config =
      _cst_new_box_autoadd_entropy_source_configPtr
          .asFunction<ffi.Pointer<wire_cst_entropy_source_config> Function()>();

  ffi.Pointer<wire_cst_event> cst_new_box_autoadd_event() {
    return _cst_new_box_autoadd_event();
  }

  late final _cst_new_box_autoadd_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_event> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_event');
  late final _cst_new_box_autoadd_event = _cst_new_box_autoadd_eventPtr
      .asFunction<ffi.Pointer<wire_cst_event> Function()>();

  ffi.Pointer<wire_cst_gossip_source_config>
      cst_new_box_autoadd_gossip_source_config() {
    return _cst_new_box_autoadd_gossip_source_config();
  }

  late final _cst_new_box_autoadd_gossip_source_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_gossip_source_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_gossip_source_config');
  late final _cst_new_box_autoadd_gossip_source_config =
      _cst_new_box_autoadd_gossip_source_configPtr
          .asFunction<ffi.Pointer<wire_cst_gossip_source_config> Function()>();

  ffi.Pointer<wire_cst_ldk_bolt_11_payment>
      cst_new_box_autoadd_ldk_bolt_11_payment() {
    return _cst_new_box_autoadd_ldk_bolt_11_payment();
  }

  late final _cst_new_box_autoadd_ldk_bolt_11_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ldk_bolt_11_payment> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ldk_bolt_11_payment');
  late final _cst_new_box_autoadd_ldk_bolt_11_payment =
      _cst_new_box_autoadd_ldk_bolt_11_paymentPtr
          .asFunction<ffi.Pointer<wire_cst_ldk_bolt_11_payment> Function()>();

  ffi.Pointer<wire_cst_ldk_mnemonic> cst_new_box_autoadd_ldk_mnemonic() {
    return _cst_new_box_autoadd_ldk_mnemonic();
  }

  late final _cst_new_box_autoadd_ldk_mnemonicPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_ldk_mnemonic> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ldk_mnemonic');
  late final _cst_new_box_autoadd_ldk_mnemonic =
      _cst_new_box_autoadd_ldk_mnemonicPtr
          .asFunction<ffi.Pointer<wire_cst_ldk_mnemonic> Function()>();

  ffi.Pointer<wire_cst_ldk_node> cst_new_box_autoadd_ldk_node() {
    return _cst_new_box_autoadd_ldk_node();
  }

  late final _cst_new_box_autoadd_ldk_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ldk_node> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_ldk_node');
  late final _cst_new_box_autoadd_ldk_node = _cst_new_box_autoadd_ldk_nodePtr
      .asFunction<ffi.Pointer<wire_cst_ldk_node> Function()>();

  ffi.Pointer<wire_cst_ldk_on_chain_payment>
      cst_new_box_autoadd_ldk_on_chain_payment() {
    return _cst_new_box_autoadd_ldk_on_chain_payment();
  }

  late final _cst_new_box_autoadd_ldk_on_chain_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ldk_on_chain_payment> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ldk_on_chain_payment');
  late final _cst_new_box_autoadd_ldk_on_chain_payment =
      _cst_new_box_autoadd_ldk_on_chain_paymentPtr
          .asFunction<ffi.Pointer<wire_cst_ldk_on_chain_payment> Function()>();

  ffi.Pointer<wire_cst_ldk_spontaneous_payment>
      cst_new_box_autoadd_ldk_spontaneous_payment() {
    return _cst_new_box_autoadd_ldk_spontaneous_payment();
  }

  late final _cst_new_box_autoadd_ldk_spontaneous_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ldk_spontaneous_payment> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ldk_spontaneous_payment');
  late final _cst_new_box_autoadd_ldk_spontaneous_payment =
      _cst_new_box_autoadd_ldk_spontaneous_paymentPtr.asFunction<
          ffi.Pointer<wire_cst_ldk_spontaneous_payment> Function()>();

  ffi.Pointer<wire_cst_liquidity_source_config>
      cst_new_box_autoadd_liquidity_source_config() {
    return _cst_new_box_autoadd_liquidity_source_config();
  }

  late final _cst_new_box_autoadd_liquidity_source_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_liquidity_source_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_liquidity_source_config');
  late final _cst_new_box_autoadd_liquidity_source_config =
      _cst_new_box_autoadd_liquidity_source_configPtr.asFunction<
          ffi.Pointer<wire_cst_liquidity_source_config> Function()>();

  ffi.Pointer<wire_cst_lsp_fee_limits> cst_new_box_autoadd_lsp_fee_limits() {
    return _cst_new_box_autoadd_lsp_fee_limits();
  }

  late final _cst_new_box_autoadd_lsp_fee_limitsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_lsp_fee_limits> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_lsp_fee_limits');
  late final _cst_new_box_autoadd_lsp_fee_limits =
      _cst_new_box_autoadd_lsp_fee_limitsPtr
          .asFunction<ffi.Pointer<wire_cst_lsp_fee_limits> Function()>();

  ffi.Pointer<wire_cst_max_dust_htlc_exposure>
      cst_new_box_autoadd_max_dust_htlc_exposure() {
    return _cst_new_box_autoadd_max_dust_htlc_exposure();
  }

  late final _cst_new_box_autoadd_max_dust_htlc_exposurePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_max_dust_htlc_exposure> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_max_dust_htlc_exposure');
  late final _cst_new_box_autoadd_max_dust_htlc_exposure =
      _cst_new_box_autoadd_max_dust_htlc_exposurePtr.asFunction<
          ffi.Pointer<wire_cst_max_dust_htlc_exposure> Function()>();

  ffi.Pointer<wire_cst_out_point> cst_new_box_autoadd_out_point() {
    return _cst_new_box_autoadd_out_point();
  }

  late final _cst_new_box_autoadd_out_pointPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_out_point> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_out_point');
  late final _cst_new_box_autoadd_out_point = _cst_new_box_autoadd_out_pointPtr
      .asFunction<ffi.Pointer<wire_cst_out_point> Function()>();

  ffi.Pointer<wire_cst_payment_details> cst_new_box_autoadd_payment_details() {
    return _cst_new_box_autoadd_payment_details();
  }

  late final _cst_new_box_autoadd_payment_detailsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_payment_details> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_payment_details');
  late final _cst_new_box_autoadd_payment_details =
      _cst_new_box_autoadd_payment_detailsPtr
          .asFunction<ffi.Pointer<wire_cst_payment_details> Function()>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_payment_failure_reason(
    int value,
  ) {
    return _cst_new_box_autoadd_payment_failure_reason(
      value,
    );
  }

  late final _cst_new_box_autoadd_payment_failure_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'frbgen_ldk_node_cst_new_box_autoadd_payment_failure_reason');
  late final _cst_new_box_autoadd_payment_failure_reason =
      _cst_new_box_autoadd_payment_failure_reasonPtr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_cst_payment_hash> cst_new_box_autoadd_payment_hash() {
    return _cst_new_box_autoadd_payment_hash();
  }

  late final _cst_new_box_autoadd_payment_hashPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_payment_hash> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_payment_hash');
  late final _cst_new_box_autoadd_payment_hash =
      _cst_new_box_autoadd_payment_hashPtr
          .asFunction<ffi.Pointer<wire_cst_payment_hash> Function()>();

  ffi.Pointer<wire_cst_payment_id> cst_new_box_autoadd_payment_id() {
    return _cst_new_box_autoadd_payment_id();
  }

  late final _cst_new_box_autoadd_payment_idPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_payment_id> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_payment_id');
  late final _cst_new_box_autoadd_payment_id =
      _cst_new_box_autoadd_payment_idPtr
          .asFunction<ffi.Pointer<wire_cst_payment_id> Function()>();

  ffi.Pointer<wire_cst_payment_preimage>
      cst_new_box_autoadd_payment_preimage() {
    return _cst_new_box_autoadd_payment_preimage();
  }

  late final _cst_new_box_autoadd_payment_preimagePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_payment_preimage> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_payment_preimage');
  late final _cst_new_box_autoadd_payment_preimage =
      _cst_new_box_autoadd_payment_preimagePtr
          .asFunction<ffi.Pointer<wire_cst_payment_preimage> Function()>();

  ffi.Pointer<wire_cst_payment_secret> cst_new_box_autoadd_payment_secret() {
    return _cst_new_box_autoadd_payment_secret();
  }

  late final _cst_new_box_autoadd_payment_secretPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_payment_secret> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_payment_secret');
  late final _cst_new_box_autoadd_payment_secret =
      _cst_new_box_autoadd_payment_secretPtr
          .asFunction<ffi.Pointer<wire_cst_payment_secret> Function()>();

  ffi.Pointer<wire_cst_public_key> cst_new_box_autoadd_public_key() {
    return _cst_new_box_autoadd_public_key();
  }

  late final _cst_new_box_autoadd_public_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_public_key> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_public_key');
  late final _cst_new_box_autoadd_public_key =
      _cst_new_box_autoadd_public_keyPtr
          .asFunction<ffi.Pointer<wire_cst_public_key> Function()>();

  ffi.Pointer<wire_cst_socket_address> cst_new_box_autoadd_socket_address() {
    return _cst_new_box_autoadd_socket_address();
  }

  late final _cst_new_box_autoadd_socket_addressPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_socket_address> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_socket_address');
  late final _cst_new_box_autoadd_socket_address =
      _cst_new_box_autoadd_socket_addressPtr
          .asFunction<ffi.Pointer<wire_cst_socket_address> Function()>();

  ffi.Pointer<wire_cst_txid> cst_new_box_autoadd_txid() {
    return _cst_new_box_autoadd_txid();
  }

  late final _cst_new_box_autoadd_txidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_txid> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_txid');
  late final _cst_new_box_autoadd_txid = _cst_new_box_autoadd_txidPtr
      .asFunction<ffi.Pointer<wire_cst_txid> Function()>();

  ffi.Pointer<ffi.Uint16> cst_new_box_autoadd_u_16(
    int value,
  ) {
    return _cst_new_box_autoadd_u_16(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Uint16)>>(
          'frbgen_ldk_node_cst_new_box_autoadd_u_16');
  late final _cst_new_box_autoadd_u_16 = _cst_new_box_autoadd_u_16Ptr
      .asFunction<ffi.Pointer<ffi.Uint16> Function(int)>();

  ffi.Pointer<ffi.Uint32> cst_new_box_autoadd_u_32(
    int value,
  ) {
    return _cst_new_box_autoadd_u_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'frbgen_ldk_node_cst_new_box_autoadd_u_32');
  late final _cst_new_box_autoadd_u_32 = _cst_new_box_autoadd_u_32Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> cst_new_box_autoadd_u_64(
    int value,
  ) {
    return _cst_new_box_autoadd_u_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'frbgen_ldk_node_cst_new_box_autoadd_u_64');
  late final _cst_new_box_autoadd_u_64 = _cst_new_box_autoadd_u_64Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_cst_user_channel_id> cst_new_box_autoadd_user_channel_id() {
    return _cst_new_box_autoadd_user_channel_id();
  }

  late final _cst_new_box_autoadd_user_channel_idPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_user_channel_id> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_user_channel_id');
  late final _cst_new_box_autoadd_user_channel_id =
      _cst_new_box_autoadd_user_channel_idPtr
          .asFunction<ffi.Pointer<wire_cst_user_channel_id> Function()>();

  ffi.Pointer<wire_cst_list_channel_details> cst_new_list_channel_details(
    int len,
  ) {
    return _cst_new_list_channel_details(
      len,
    );
  }

  late final _cst_new_list_channel_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_channel_details> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_channel_details');
  late final _cst_new_list_channel_details = _cst_new_list_channel_detailsPtr
      .asFunction<ffi.Pointer<wire_cst_list_channel_details> Function(int)>();

  ffi.Pointer<wire_cst_list_lightning_balance> cst_new_list_lightning_balance(
    int len,
  ) {
    return _cst_new_list_lightning_balance(
      len,
    );
  }

  late final _cst_new_list_lightning_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_lightning_balance> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_lightning_balance');
  late final _cst_new_list_lightning_balance =
      _cst_new_list_lightning_balancePtr.asFunction<
          ffi.Pointer<wire_cst_list_lightning_balance> Function(int)>();

  ffi.Pointer<wire_cst_list_payment_details> cst_new_list_payment_details(
    int len,
  ) {
    return _cst_new_list_payment_details(
      len,
    );
  }

  late final _cst_new_list_payment_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_payment_details> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_payment_details');
  late final _cst_new_list_payment_details = _cst_new_list_payment_detailsPtr
      .asFunction<ffi.Pointer<wire_cst_list_payment_details> Function(int)>();

  ffi.Pointer<wire_cst_list_peer_details> cst_new_list_peer_details(
    int len,
  ) {
    return _cst_new_list_peer_details(
      len,
    );
  }

  late final _cst_new_list_peer_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_peer_details> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_peer_details');
  late final _cst_new_list_peer_details = _cst_new_list_peer_detailsPtr
      .asFunction<ffi.Pointer<wire_cst_list_peer_details> Function(int)>();

  ffi.Pointer<wire_cst_list_pending_sweep_balance>
      cst_new_list_pending_sweep_balance(
    int len,
  ) {
    return _cst_new_list_pending_sweep_balance(
      len,
    );
  }

  late final _cst_new_list_pending_sweep_balancePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_pending_sweep_balance> Function(
                  ffi.Int32)>>(
      'frbgen_ldk_node_cst_new_list_pending_sweep_balance');
  late final _cst_new_list_pending_sweep_balance =
      _cst_new_list_pending_sweep_balancePtr.asFunction<
          ffi.Pointer<wire_cst_list_pending_sweep_balance> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_new_list_prim_u_8_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_8_loose(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_loosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_prim_u_8_loose');
  late final _cst_new_list_prim_u_8_loose = _cst_new_list_prim_u_8_loosePtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_public_key> cst_new_list_public_key(
    int len,
  ) {
    return _cst_new_list_public_key(
      len,
    );
  }

  late final _cst_new_list_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_public_key> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_public_key');
  late final _cst_new_list_public_key = _cst_new_list_public_keyPtr
      .asFunction<ffi.Pointer<wire_cst_list_public_key> Function(int)>();

  ffi.Pointer<wire_cst_list_socket_address> cst_new_list_socket_address(
    int len,
  ) {
    return _cst_new_list_socket_address(
      len,
    );
  }

  late final _cst_new_list_socket_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_socket_address> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_socket_address');
  late final _cst_new_list_socket_address = _cst_new_list_socket_addressPtr
      .asFunction<ffi.Pointer<wire_cst_list_socket_address> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_SocketAddress_TcpIpV4 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> addr;

  @ffi.Uint16()
  external int port;
}

final class wire_cst_SocketAddress_TcpIpV6 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> addr;

  @ffi.Uint16()
  external int port;
}

final class wire_cst_SocketAddress_OnionV2 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_SocketAddress_OnionV3 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> ed25519_pubkey;

  @ffi.Uint16()
  external int checksum;

  @ffi.Uint8()
  external int version;

  @ffi.Uint16()
  external int port;
}

final class wire_cst_SocketAddress_Hostname extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> addr;

  @ffi.Uint16()
  external int port;
}

final class SocketAddressKind extends ffi.Union {
  external wire_cst_SocketAddress_TcpIpV4 TcpIpV4;

  external wire_cst_SocketAddress_TcpIpV6 TcpIpV6;

  external wire_cst_SocketAddress_OnionV2 OnionV2;

  external wire_cst_SocketAddress_OnionV3 OnionV3;

  external wire_cst_SocketAddress_Hostname Hostname;
}

final class wire_cst_socket_address extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external SocketAddressKind kind;
}

final class wire_cst_list_socket_address extends ffi.Struct {
  external ffi.Pointer<wire_cst_socket_address> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_public_key extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> hex;
}

final class wire_cst_list_public_key extends ffi.Struct {
  external ffi.Pointer<wire_cst_public_key> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_config extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> storage_dir_path;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> log_dir_path;

  @ffi.Int32()
  external int network;

  external ffi.Pointer<wire_cst_list_socket_address> listening_addresses;

  @ffi.Uint32()
  external int default_cltv_expiry_delta;

  @ffi.Uint64()
  external int onchain_wallet_sync_interval_secs;

  @ffi.Uint64()
  external int wallet_sync_interval_secs;

  @ffi.Uint64()
  external int fee_rate_cache_update_interval_secs;

  external ffi.Pointer<wire_cst_list_public_key> trusted_peers_0conf;

  @ffi.Uint64()
  external int probing_liquidity_limit_multiplier;

  @ffi.Int32()
  external int log_level;
}

final class wire_cst_ChainDataSourceConfig_Esplora extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class ChainDataSourceConfigKind extends ffi.Union {
  external wire_cst_ChainDataSourceConfig_Esplora Esplora;
}

final class wire_cst_chain_data_source_config extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ChainDataSourceConfigKind kind;
}

final class wire_cst_EntropySourceConfig_SeedFile extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_EntropySourceConfig_SeedBytes extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_ldk_mnemonic extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> seed_phrase;
}

final class wire_cst_EntropySourceConfig_Bip39Mnemonic extends ffi.Struct {
  external ffi.Pointer<wire_cst_ldk_mnemonic> mnemonic;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> passphrase;
}

final class EntropySourceConfigKind extends ffi.Union {
  external wire_cst_EntropySourceConfig_SeedFile SeedFile;

  external wire_cst_EntropySourceConfig_SeedBytes SeedBytes;

  external wire_cst_EntropySourceConfig_Bip39Mnemonic Bip39Mnemonic;
}

final class wire_cst_entropy_source_config extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external EntropySourceConfigKind kind;
}

final class wire_cst_GossipSourceConfig_RapidGossipSync extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class GossipSourceConfigKind extends ffi.Union {
  external wire_cst_GossipSourceConfig_RapidGossipSync RapidGossipSync;
}

final class wire_cst_gossip_source_config extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external GossipSourceConfigKind kind;
}

final class wire_cst_record_socket_address_public_key_opt_string
    extends ffi.Struct {
  external wire_cst_socket_address field0;

  external wire_cst_public_key field1;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field2;
}

final class wire_cst_liquidity_source_config extends ffi.Struct {
  external wire_cst_record_socket_address_public_key_opt_string lsps2_service;
}

final class wire_cst_ldk_bolt_11_payment extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_bolt_11_invoice extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> signed_raw_invoice;
}

final class wire_cst_ldk_node extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_user_channel_id extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_MaxDustHTLCExposure_FixedLimitMsat extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

final class wire_cst_MaxDustHTLCExposure_FeeRateMultiplier extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

final class MaxDustHTLCExposureKind extends ffi.Union {
  external wire_cst_MaxDustHTLCExposure_FixedLimitMsat FixedLimitMsat;

  external wire_cst_MaxDustHTLCExposure_FeeRateMultiplier FeeRateMultiplier;
}

final class wire_cst_max_dust_htlc_exposure extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external MaxDustHTLCExposureKind kind;
}

final class wire_cst_channel_config extends ffi.Struct {
  @ffi.Uint32()
  external int forwarding_fee_proportional_millionths;

  @ffi.Uint32()
  external int forwarding_fee_base_msat;

  @ffi.Uint16()
  external int cltv_expiry_delta;

  external ffi.Pointer<wire_cst_max_dust_htlc_exposure> max_dust_htlc_exposure;

  @ffi.Uint64()
  external int force_close_avoidance_max_fee_satoshis;

  @ffi.Bool()
  external bool accept_underpaying_htlcs;
}

final class wire_cst_payment_id extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_list_prim_u_8_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_ldk_on_chain_payment extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_address extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> s;
}

final class wire_cst_ldk_spontaneous_payment extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_channel_id extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_ClosureReason_CounterpartyForceClosed extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> peer_msg;
}

final class wire_cst_ClosureReason_ProcessingError extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> err;
}

final class ClosureReasonKind extends ffi.Union {
  external wire_cst_ClosureReason_CounterpartyForceClosed
      CounterpartyForceClosed;

  external wire_cst_ClosureReason_ProcessingError ProcessingError;
}

final class wire_cst_closure_reason extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ClosureReasonKind kind;
}

final class wire_cst_payment_hash extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_Event_PaymentSuccessful extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_id> payment_id;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;

  external ffi.Pointer<ffi.Uint64> fee_paid_msat;
}

final class wire_cst_Event_PaymentFailed extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_id> payment_id;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;

  external ffi.Pointer<ffi.Int32> reason;
}

final class wire_cst_Event_PaymentReceived extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_id> payment_id;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;

  @ffi.Uint64()
  external int amount_msat;
}

final class wire_cst_txid extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> hash;
}

final class wire_cst_out_point extends ffi.Struct {
  external wire_cst_txid txid;

  @ffi.Uint32()
  external int vout;
}

final class wire_cst_Event_ChannelPending extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_user_channel_id> user_channel_id;

  external ffi.Pointer<wire_cst_channel_id> former_temporary_channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  external ffi.Pointer<wire_cst_out_point> funding_txo;
}

final class wire_cst_Event_ChannelReady extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_user_channel_id> user_channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;
}

final class wire_cst_Event_ChannelClosed extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_user_channel_id> user_channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  external ffi.Pointer<wire_cst_closure_reason> reason;
}

final class EventKind extends ffi.Union {
  external wire_cst_Event_PaymentSuccessful PaymentSuccessful;

  external wire_cst_Event_PaymentFailed PaymentFailed;

  external wire_cst_Event_PaymentReceived PaymentReceived;

  external wire_cst_Event_ChannelPending ChannelPending;

  external wire_cst_Event_ChannelReady ChannelReady;

  external wire_cst_Event_ChannelClosed ChannelClosed;
}

final class wire_cst_event extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external EventKind kind;
}

final class wire_cst_lsp_fee_limits extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> max_total_opening_fee_msat;

  external ffi.Pointer<ffi.Uint64> max_proportional_opening_fee_ppm_msat;
}

final class wire_cst_payment_preimage extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_payment_secret extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_PaymentKind_Bolt11 extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_hash> hash;

  external ffi.Pointer<wire_cst_payment_preimage> preimage;

  external ffi.Pointer<wire_cst_payment_secret> secret;
}

final class wire_cst_PaymentKind_Bolt11Jit extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_hash> hash;

  external ffi.Pointer<wire_cst_payment_preimage> preimage;

  external ffi.Pointer<wire_cst_payment_secret> secret;

  external ffi.Pointer<wire_cst_lsp_fee_limits> lsp_fee_limits;
}

final class wire_cst_PaymentKind_Spontaneous extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_hash> hash;

  external ffi.Pointer<wire_cst_payment_preimage> preimage;
}

final class PaymentKindKind extends ffi.Union {
  external wire_cst_PaymentKind_Bolt11 Bolt11;

  external wire_cst_PaymentKind_Bolt11Jit Bolt11Jit;

  external wire_cst_PaymentKind_Spontaneous Spontaneous;
}

final class wire_cst_payment_kind extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PaymentKindKind kind;
}

final class wire_cst_payment_details extends ffi.Struct {
  external wire_cst_payment_id id;

  external wire_cst_payment_kind kind;

  external ffi.Pointer<ffi.Uint64> amount_msat;

  @ffi.Int32()
  external int direction;

  @ffi.Int32()
  external int status;
}

final class wire_cst_channel_details extends ffi.Struct {
  external wire_cst_channel_id channel_id;

  external wire_cst_public_key counterparty_node_id;

  external ffi.Pointer<wire_cst_out_point> funding_txo;

  @ffi.Uint64()
  external int channel_value_sats;

  external ffi.Pointer<ffi.Uint64> unspendable_punishment_reserve;

  external wire_cst_user_channel_id user_channel_id;

  @ffi.Uint32()
  external int feerate_sat_per_1000_weight;

  @ffi.Uint64()
  external int outbound_capacity_msat;

  @ffi.Uint64()
  external int inbound_capacity_msat;

  external ffi.Pointer<ffi.Uint32> confirmations_required;

  external ffi.Pointer<ffi.Uint32> confirmations;

  @ffi.Bool()
  external bool is_outbound;

  @ffi.Bool()
  external bool is_channel_ready;

  @ffi.Bool()
  external bool is_usable;

  @ffi.Bool()
  external bool is_public;

  external ffi.Pointer<ffi.Uint16> cltv_expiry_delta;

  @ffi.Uint64()
  external int counterparty_unspendable_punishment_reserve;

  external ffi.Pointer<ffi.Uint64> counterparty_outbound_htlc_minimum_msat;

  external ffi.Pointer<ffi.Uint64> counterparty_outbound_htlc_maximum_msat;

  external ffi.Pointer<ffi.Uint32> counterparty_forwarding_info_fee_base_msat;

  external ffi.Pointer<ffi.Uint32>
      counterparty_forwarding_info_fee_proportional_millionths;

  external ffi.Pointer<ffi.Uint16>
      counterparty_forwarding_info_cltv_expiry_delta;

  @ffi.Uint64()
  external int next_outbound_htlc_limit_msat;

  @ffi.Uint64()
  external int next_outbound_htlc_minimum_msat;

  external ffi.Pointer<ffi.Uint16> force_close_spend_delay;

  @ffi.Uint64()
  external int inbound_htlc_minimum_msat;

  external ffi.Pointer<ffi.Uint64> inbound_htlc_maximum_msat;

  external wire_cst_channel_config config;
}

final class wire_cst_list_channel_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_details> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_LightningBalance_ClaimableOnChannelClose
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;
}

final class wire_cst_LightningBalance_ClaimableAwaitingConfirmations
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;

  @ffi.Uint32()
  external int confirmation_height;
}

final class wire_cst_LightningBalance_ContentiousClaimable extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;

  @ffi.Uint32()
  external int timeout_height;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;

  external ffi.Pointer<wire_cst_payment_preimage> payment_preimage;
}

final class wire_cst_LightningBalance_MaybeTimeoutClaimableHTLC
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;

  @ffi.Uint32()
  external int claimable_height;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;
}

final class wire_cst_LightningBalance_MaybePreimageClaimableHTLC
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;

  @ffi.Uint32()
  external int expiry_height;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;
}

final class wire_cst_LightningBalance_CounterpartyRevokedOutputClaimable
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;
}

final class LightningBalanceKind extends ffi.Union {
  external wire_cst_LightningBalance_ClaimableOnChannelClose
      ClaimableOnChannelClose;

  external wire_cst_LightningBalance_ClaimableAwaitingConfirmations
      ClaimableAwaitingConfirmations;

  external wire_cst_LightningBalance_ContentiousClaimable ContentiousClaimable;

  external wire_cst_LightningBalance_MaybeTimeoutClaimableHTLC
      MaybeTimeoutClaimableHTLC;

  external wire_cst_LightningBalance_MaybePreimageClaimableHTLC
      MaybePreimageClaimableHTLC;

  external wire_cst_LightningBalance_CounterpartyRevokedOutputClaimable
      CounterpartyRevokedOutputClaimable;
}

final class wire_cst_lightning_balance extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external LightningBalanceKind kind;
}

final class wire_cst_list_lightning_balance extends ffi.Struct {
  external ffi.Pointer<wire_cst_lightning_balance> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_payment_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_details> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_peer_details extends ffi.Struct {
  external wire_cst_public_key node_id;

  external wire_cst_socket_address address;

  @ffi.Bool()
  external bool is_connected;
}

final class wire_cst_list_peer_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_peer_details> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_PendingSweepBalance_PendingBroadcast extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  @ffi.Uint64()
  external int amount_satoshis;
}

final class wire_cst_PendingSweepBalance_BroadcastAwaitingConfirmation
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  @ffi.Uint32()
  external int latest_broadcast_height;

  external ffi.Pointer<wire_cst_txid> latest_spending_txid;

  @ffi.Uint64()
  external int amount_satoshis;
}

final class wire_cst_PendingSweepBalance_AwaitingThresholdConfirmations
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_txid> latest_spending_txid;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> confirmation_hash;

  @ffi.Uint32()
  external int confirmation_height;

  @ffi.Uint64()
  external int amount_satoshis;
}

final class PendingSweepBalanceKind extends ffi.Union {
  external wire_cst_PendingSweepBalance_PendingBroadcast PendingBroadcast;

  external wire_cst_PendingSweepBalance_BroadcastAwaitingConfirmation
      BroadcastAwaitingConfirmation;

  external wire_cst_PendingSweepBalance_AwaitingThresholdConfirmations
      AwaitingThresholdConfirmations;
}

final class wire_cst_pending_sweep_balance extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PendingSweepBalanceKind kind;
}

final class wire_cst_list_pending_sweep_balance extends ffi.Struct {
  external ffi.Pointer<wire_cst_pending_sweep_balance> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_balance_details extends ffi.Struct {
  @ffi.Uint64()
  external int total_onchain_balance_sats;

  @ffi.Uint64()
  external int spendable_onchain_balance_sats;

  @ffi.Uint64()
  external int total_lightning_balance_sats;

  external ffi.Pointer<wire_cst_list_lightning_balance> lightning_balances;

  external ffi.Pointer<wire_cst_list_pending_sweep_balance>
      pending_balances_from_channel_closures;
}

final class wire_cst_best_block extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> block_hash;

  @ffi.Uint32()
  external int height;
}

final class wire_cst_node_status extends ffi.Struct {
  @ffi.Bool()
  external bool is_running;

  @ffi.Bool()
  external bool is_listening;

  external wire_cst_best_block current_best_block;

  external ffi.Pointer<ffi.Uint64> latest_wallet_sync_timestamp;

  external ffi.Pointer<ffi.Uint64> latest_onchain_wallet_sync_timestamp;

  external ffi.Pointer<ffi.Uint64> latest_fee_rate_cache_update_timestamp;

  external ffi.Pointer<ffi.Uint64> latest_rgs_snapshot_timestamp;

  external ffi.Pointer<ffi.Uint64> latest_node_announcement_broadcast_timestamp;
}
